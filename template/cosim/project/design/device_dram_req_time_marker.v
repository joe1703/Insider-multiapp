// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="device_dram_req_time_marker,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.727000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=212,HLS_SYN_LUT=317}" *)

module device_dram_req_time_marker (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
ap_continue,
        ap_idle,
        ap_ready,
        device_dram_read_req_V_num_dout,
        device_dram_read_req_V_num_empty_n,
        device_dram_read_req_V_num_read,
        device_dram_read_req_V_addr_dout,
        device_dram_read_req_V_addr_empty_n,
        device_dram_read_req_V_addr_read,
        device_dram_write_req_apply_V_num_dout,
        device_dram_write_req_apply_V_num_empty_n,
        device_dram_write_req_apply_V_num_read,
        device_dram_write_req_apply_V_addr_dout,
        device_dram_write_req_apply_V_addr_empty_n,
        device_dram_write_req_apply_V_addr_read,
        device_dram_read_req_with_time_V_req_num_din,
        device_dram_read_req_with_time_V_req_num_full_n,
        device_dram_read_req_with_time_V_req_num_write,
        device_dram_read_req_with_time_V_req_addr_din,
        device_dram_read_req_with_time_V_req_addr_full_n,
        device_dram_read_req_with_time_V_req_addr_write,
        device_dram_read_req_with_time_V_time_din,
        device_dram_read_req_with_time_V_time_full_n,
        device_dram_read_req_with_time_V_time_write,
        device_dram_write_req_apply_with_time_V_req_apply_num_din,
        device_dram_write_req_apply_with_time_V_req_apply_num_full_n,
        device_dram_write_req_apply_with_time_V_req_apply_num_write,
        device_dram_write_req_apply_with_time_V_req_apply_addr_din,
        device_dram_write_req_apply_with_time_V_req_apply_addr_full_n,
        device_dram_write_req_apply_with_time_V_req_apply_addr_write,
        device_dram_write_req_apply_with_time_V_time_din,
        device_dram_write_req_apply_with_time_V_time_full_n,
        device_dram_write_req_apply_with_time_V_time_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output ap_ready; output ap_continue;
input  [7:0] device_dram_read_req_V_num_dout;
input   device_dram_read_req_V_num_empty_n;
output   device_dram_read_req_V_num_read;
input  [63:0] device_dram_read_req_V_addr_dout;
input   device_dram_read_req_V_addr_empty_n;
output   device_dram_read_req_V_addr_read;
input  [7:0] device_dram_write_req_apply_V_num_dout;
input   device_dram_write_req_apply_V_num_empty_n;
output   device_dram_write_req_apply_V_num_read;
input  [63:0] device_dram_write_req_apply_V_addr_dout;
input   device_dram_write_req_apply_V_addr_empty_n;
output   device_dram_write_req_apply_V_addr_read;
output  [7:0] device_dram_read_req_with_time_V_req_num_din;
input   device_dram_read_req_with_time_V_req_num_full_n;
output   device_dram_read_req_with_time_V_req_num_write;
output  [63:0] device_dram_read_req_with_time_V_req_addr_din;
input   device_dram_read_req_with_time_V_req_addr_full_n;
output   device_dram_read_req_with_time_V_req_addr_write;
output  [63:0] device_dram_read_req_with_time_V_time_din;
input   device_dram_read_req_with_time_V_time_full_n;
output   device_dram_read_req_with_time_V_time_write;
output  [7:0] device_dram_write_req_apply_with_time_V_req_apply_num_din;
input   device_dram_write_req_apply_with_time_V_req_apply_num_full_n;
output   device_dram_write_req_apply_with_time_V_req_apply_num_write;
output  [63:0] device_dram_write_req_apply_with_time_V_req_apply_addr_din;
input   device_dram_write_req_apply_with_time_V_req_apply_addr_full_n;
output   device_dram_write_req_apply_with_time_V_req_apply_addr_write;
output  [63:0] device_dram_write_req_apply_with_time_V_time_din;
input   device_dram_write_req_apply_with_time_V_time_full_n;
output   device_dram_write_req_apply_with_time_V_time_write;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] time_fu_421_p2;
wire    ap_CS_fsm_state2;
reg   [63:0] p_09_1_2_phi_fu_390_p4;
reg   [63:0] p_09_1_s_reg_228;
reg   [7:0] p_09_0_2_phi_fu_402_p4;
reg   [7:0] p_09_0_s_reg_239;
reg   [63:0] p_0_1_2_phi_fu_333_p4;
reg   [63:0] p_0_1_s_reg_250;
reg   [7:0] p_0_0_2_phi_fu_345_p4;
reg   [7:0] p_0_0_s_reg_261;
reg   [63:0] read_req_with_time_time_reg_272;
wire   [0:0] valid_read_req_phi_fu_289_p4;
reg   [0:0] valid_read_req_reg_285;
reg   [0:0] valid_read_req_2_phi_fu_357_p4;
wire   [0:0] valid_write_req_apply_phi_fu_300_p4;
reg   [0:0] valid_write_req_apply_reg_296;
reg   [0:0] valid_write_req_apply_2_phi_fu_414_p4;
reg   [63:0] read_req_with_time_req_addr_phi_fu_310_p4;
wire   [0:0] empty_n_4_fu_427_p1;
reg   [7:0] read_req_with_time_req_num_phi_fu_321_p4;
wire   [0:0] not_full_n_i_fu_444_p2;
reg   [63:0] write_req_apply_with_time_req_apply_addr_phi_fu_367_p4;
wire   [0:0] empty_n_5_fu_451_p1;
reg   [7:0] write_req_apply_with_time_req_apply_num_phi_fu_378_p4;
wire   [0:0] not_full_n_i5_fu_468_p2;
reg    device_dram_read_req_V_num0_update;
wire   [0:0] empty_n_nbread_fu_186_p3_0;
reg    device_dram_read_req_with_time_V_time1_update;
wire   [0:0] full_n_nbwrite_fu_194_p7;
reg    device_dram_write_req_apply_V_num0_update;
wire   [0:0] empty_n_1_nbread_fu_207_p3_0;
reg    device_dram_write_req_apply_with_time_V_time1_update;
wire   [0:0] full_n_1_nbwrite_fu_215_p7;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        read_req_with_time_time_reg_272 <= time_fu_421_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        read_req_with_time_time_reg_272 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        valid_read_req_reg_285 <= valid_read_req_2_phi_fu_357_p4;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        valid_read_req_reg_285 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        valid_write_req_apply_reg_296 <= valid_write_req_apply_2_phi_fu_414_p4;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        valid_write_req_apply_reg_296 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_09_0_s_reg_239 <= p_09_0_2_phi_fu_402_p4;
        p_09_1_s_reg_228 <= p_09_1_2_phi_fu_390_p4;
        p_0_0_s_reg_261 <= p_0_0_2_phi_fu_345_p4;
        p_0_1_s_reg_250 <= p_0_1_2_phi_fu_333_p4;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == valid_read_req_phi_fu_289_p4) & (1'b1 == (device_dram_read_req_V_num_empty_n & device_dram_read_req_V_addr_empty_n)))) begin
        device_dram_read_req_V_num0_update = 1'b1;
    end else begin
        device_dram_read_req_V_num0_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((valid_read_req_phi_fu_289_p4 == 1'd1) | (1'd1 == empty_n_4_fu_427_p1)) & (1'b1 == (device_dram_read_req_with_time_V_req_num_full_n & device_dram_read_req_with_time_V_req_addr_full_n & device_dram_read_req_with_time_V_time_full_n)))) begin
        device_dram_read_req_with_time_V_time1_update = 1'b1;
    end else begin
        device_dram_read_req_with_time_V_time1_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == valid_write_req_apply_phi_fu_300_p4) & (1'b1 == (device_dram_write_req_apply_V_num_empty_n & device_dram_write_req_apply_V_addr_empty_n)))) begin
        device_dram_write_req_apply_V_num0_update = 1'b1;
    end else begin
        device_dram_write_req_apply_V_num0_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((valid_write_req_apply_phi_fu_300_p4 == 1'd1) | (1'd1 == empty_n_5_fu_451_p1)) & (1'b1 == (device_dram_write_req_apply_with_time_V_req_apply_num_full_n & device_dram_write_req_apply_with_time_V_req_apply_addr_full_n & device_dram_write_req_apply_with_time_V_time_full_n)))) begin
        device_dram_write_req_apply_with_time_V_time1_update = 1'b1;
    end else begin
        device_dram_write_req_apply_with_time_V_time1_update = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd0 == valid_write_req_apply_phi_fu_300_p4) & (1'd0 == empty_n_5_fu_451_p1))) begin
            p_09_0_2_phi_fu_402_p4 = device_dram_write_req_apply_V_num_dout;
        end else if (((valid_write_req_apply_phi_fu_300_p4 == 1'd1) | (1'd1 == empty_n_5_fu_451_p1))) begin
            p_09_0_2_phi_fu_402_p4 = write_req_apply_with_time_req_apply_num_phi_fu_378_p4;
        end else begin
            p_09_0_2_phi_fu_402_p4 = 'bx;
        end
    end else begin
        p_09_0_2_phi_fu_402_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd0 == valid_write_req_apply_phi_fu_300_p4) & (1'd0 == empty_n_5_fu_451_p1))) begin
            p_09_1_2_phi_fu_390_p4 = device_dram_write_req_apply_V_addr_dout;
        end else if (((valid_write_req_apply_phi_fu_300_p4 == 1'd1) | (1'd1 == empty_n_5_fu_451_p1))) begin
            p_09_1_2_phi_fu_390_p4 = write_req_apply_with_time_req_apply_addr_phi_fu_367_p4;
        end else begin
            p_09_1_2_phi_fu_390_p4 = 'bx;
        end
    end else begin
        p_09_1_2_phi_fu_390_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd0 == valid_read_req_phi_fu_289_p4) & (1'd0 == empty_n_4_fu_427_p1))) begin
            p_0_0_2_phi_fu_345_p4 = device_dram_read_req_V_num_dout;
        end else if (((valid_read_req_phi_fu_289_p4 == 1'd1) | (1'd1 == empty_n_4_fu_427_p1))) begin
            p_0_0_2_phi_fu_345_p4 = read_req_with_time_req_num_phi_fu_321_p4;
        end else begin
            p_0_0_2_phi_fu_345_p4 = 'bx;
        end
    end else begin
        p_0_0_2_phi_fu_345_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd0 == valid_read_req_phi_fu_289_p4) & (1'd0 == empty_n_4_fu_427_p1))) begin
            p_0_1_2_phi_fu_333_p4 = device_dram_read_req_V_addr_dout;
        end else if (((valid_read_req_phi_fu_289_p4 == 1'd1) | (1'd1 == empty_n_4_fu_427_p1))) begin
            p_0_1_2_phi_fu_333_p4 = read_req_with_time_req_addr_phi_fu_310_p4;
        end else begin
            p_0_1_2_phi_fu_333_p4 = 'bx;
        end
    end else begin
        p_0_1_2_phi_fu_333_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd1 == empty_n_4_fu_427_p1) & (1'd0 == valid_read_req_phi_fu_289_p4))) begin
            read_req_with_time_req_addr_phi_fu_310_p4 = device_dram_read_req_V_addr_dout;
        end else if ((valid_read_req_phi_fu_289_p4 == 1'd1)) begin
            read_req_with_time_req_addr_phi_fu_310_p4 = p_0_1_s_reg_250;
        end else begin
            read_req_with_time_req_addr_phi_fu_310_p4 = 'bx;
        end
    end else begin
        read_req_with_time_req_addr_phi_fu_310_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd1 == empty_n_4_fu_427_p1) & (1'd0 == valid_read_req_phi_fu_289_p4))) begin
            read_req_with_time_req_num_phi_fu_321_p4 = device_dram_read_req_V_num_dout;
        end else if ((valid_read_req_phi_fu_289_p4 == 1'd1)) begin
            read_req_with_time_req_num_phi_fu_321_p4 = p_0_0_s_reg_261;
        end else begin
            read_req_with_time_req_num_phi_fu_321_p4 = 'bx;
        end
    end else begin
        read_req_with_time_req_num_phi_fu_321_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd0 == valid_read_req_phi_fu_289_p4) & (1'd0 == empty_n_4_fu_427_p1))) begin
            valid_read_req_2_phi_fu_357_p4 = empty_n_nbread_fu_186_p3_0;
        end else if (((valid_read_req_phi_fu_289_p4 == 1'd1) | (1'd1 == empty_n_4_fu_427_p1))) begin
            valid_read_req_2_phi_fu_357_p4 = not_full_n_i_fu_444_p2;
        end else begin
            valid_read_req_2_phi_fu_357_p4 = 'bx;
        end
    end else begin
        valid_read_req_2_phi_fu_357_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd0 == valid_write_req_apply_phi_fu_300_p4) & (1'd0 == empty_n_5_fu_451_p1))) begin
            valid_write_req_apply_2_phi_fu_414_p4 = empty_n_1_nbread_fu_207_p3_0;
        end else if (((valid_write_req_apply_phi_fu_300_p4 == 1'd1) | (1'd1 == empty_n_5_fu_451_p1))) begin
            valid_write_req_apply_2_phi_fu_414_p4 = not_full_n_i5_fu_468_p2;
        end else begin
            valid_write_req_apply_2_phi_fu_414_p4 = 'bx;
        end
    end else begin
        valid_write_req_apply_2_phi_fu_414_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd1 == empty_n_5_fu_451_p1) & (1'd0 == valid_write_req_apply_phi_fu_300_p4))) begin
            write_req_apply_with_time_req_apply_addr_phi_fu_367_p4 = device_dram_write_req_apply_V_addr_dout;
        end else if ((valid_write_req_apply_phi_fu_300_p4 == 1'd1)) begin
            write_req_apply_with_time_req_apply_addr_phi_fu_367_p4 = p_09_1_s_reg_228;
        end else begin
            write_req_apply_with_time_req_apply_addr_phi_fu_367_p4 = 'bx;
        end
    end else begin
        write_req_apply_with_time_req_apply_addr_phi_fu_367_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd1 == empty_n_5_fu_451_p1) & (1'd0 == valid_write_req_apply_phi_fu_300_p4))) begin
            write_req_apply_with_time_req_apply_num_phi_fu_378_p4 = device_dram_write_req_apply_V_num_dout;
        end else if ((valid_write_req_apply_phi_fu_300_p4 == 1'd1)) begin
            write_req_apply_with_time_req_apply_num_phi_fu_378_p4 = p_09_0_s_reg_239;
        end else begin
            write_req_apply_with_time_req_apply_num_phi_fu_378_p4 = 'bx;
        end
    end else begin
        write_req_apply_with_time_req_apply_num_phi_fu_378_p4 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_done = 1'b0;

assign ap_ready = 1'b0;

assign device_dram_read_req_V_addr_read = device_dram_read_req_V_num0_update;

assign device_dram_read_req_V_num_read = device_dram_read_req_V_num0_update;

assign device_dram_read_req_with_time_V_req_addr_din = read_req_with_time_req_addr_phi_fu_310_p4;

assign device_dram_read_req_with_time_V_req_addr_write = device_dram_read_req_with_time_V_time1_update;

assign device_dram_read_req_with_time_V_req_num_din = read_req_with_time_req_num_phi_fu_321_p4;

assign device_dram_read_req_with_time_V_req_num_write = device_dram_read_req_with_time_V_time1_update;

assign device_dram_read_req_with_time_V_time_din = read_req_with_time_time_reg_272;

assign device_dram_read_req_with_time_V_time_write = device_dram_read_req_with_time_V_time1_update;

assign device_dram_write_req_apply_V_addr_read = device_dram_write_req_apply_V_num0_update;

assign device_dram_write_req_apply_V_num_read = device_dram_write_req_apply_V_num0_update;

assign device_dram_write_req_apply_with_time_V_req_apply_addr_din = write_req_apply_with_time_req_apply_addr_phi_fu_367_p4;

assign device_dram_write_req_apply_with_time_V_req_apply_addr_write = device_dram_write_req_apply_with_time_V_time1_update;

assign device_dram_write_req_apply_with_time_V_req_apply_num_din = write_req_apply_with_time_req_apply_num_phi_fu_378_p4;

assign device_dram_write_req_apply_with_time_V_req_apply_num_write = device_dram_write_req_apply_with_time_V_time1_update;

assign device_dram_write_req_apply_with_time_V_time_din = read_req_with_time_time_reg_272;

assign device_dram_write_req_apply_with_time_V_time_write = device_dram_write_req_apply_with_time_V_time1_update;

assign empty_n_1_nbread_fu_207_p3_0 = (device_dram_write_req_apply_V_num_empty_n & device_dram_write_req_apply_V_addr_empty_n);

assign empty_n_4_fu_427_p1 = empty_n_nbread_fu_186_p3_0;

assign empty_n_5_fu_451_p1 = empty_n_1_nbread_fu_207_p3_0;

assign empty_n_nbread_fu_186_p3_0 = (device_dram_read_req_V_num_empty_n & device_dram_read_req_V_addr_empty_n);

assign full_n_1_nbwrite_fu_215_p7 = (device_dram_write_req_apply_with_time_V_req_apply_num_full_n & device_dram_write_req_apply_with_time_V_req_apply_addr_full_n & device_dram_write_req_apply_with_time_V_time_full_n);

assign full_n_nbwrite_fu_194_p7 = (device_dram_read_req_with_time_V_req_num_full_n & device_dram_read_req_with_time_V_req_addr_full_n & device_dram_read_req_with_time_V_time_full_n);

assign not_full_n_i5_fu_468_p2 = (full_n_1_nbwrite_fu_215_p7 ^ 1'd1);

assign not_full_n_i_fu_444_p2 = (full_n_nbwrite_fu_194_p7 ^ 1'd1);

assign time_fu_421_p2 = (read_req_with_time_time_reg_272 + 64'd1);

assign valid_read_req_phi_fu_289_p4 = valid_read_req_reg_285;

assign valid_write_req_apply_phi_fu_300_p4 = valid_write_req_apply_reg_296;

endmodule //device_dram_req_time_marker
