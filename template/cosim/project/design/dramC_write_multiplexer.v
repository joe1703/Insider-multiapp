// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.op
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dramC_write_multiplexer,hls_ip_2017_4_op,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.523750,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1183,HLS_SYN_LUT=344}" *)

module dramC_write_multiplexer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
ap_continue,
        ap_idle,
        ap_ready,
        dramC_write_req_data_V_last_din,
        dramC_write_req_data_V_last_full_n,
        dramC_write_req_data_V_last_write,
        dramC_write_req_data_V_data_V_din,
        dramC_write_req_data_V_data_V_full_n,
        dramC_write_req_data_V_data_V_write,
        dramC_write_req_apply_V_num_din,
        dramC_write_req_apply_V_num_full_n,
        dramC_write_req_apply_V_num_write,
        dramC_write_req_apply_V_addr_din,
        dramC_write_req_apply_V_addr_full_n,
        dramC_write_req_apply_V_addr_write,
        host_dramC_write_req_data_V_last_dout,
        host_dramC_write_req_data_V_last_empty_n,
        host_dramC_write_req_data_V_last_read,
        host_dramC_write_req_data_V_data_V_dout,
        host_dramC_write_req_data_V_data_V_empty_n,
        host_dramC_write_req_data_V_data_V_read,
        host_dramC_write_req_apply_V_num_dout,
        host_dramC_write_req_apply_V_num_empty_n,
        host_dramC_write_req_apply_V_num_read,
        host_dramC_write_req_apply_V_addr_dout,
        host_dramC_write_req_apply_V_addr_empty_n,
        host_dramC_write_req_apply_V_addr_read,
        device_dramC_write_req_data_V_last_dout,
        device_dramC_write_req_data_V_last_empty_n,
        device_dramC_write_req_data_V_last_read,
        device_dramC_write_req_data_V_data_V_dout,
        device_dramC_write_req_data_V_data_V_empty_n,
        device_dramC_write_req_data_V_data_V_read,
        device_dramC_write_req_apply_V_num_dout,
        device_dramC_write_req_apply_V_num_empty_n,
        device_dramC_write_req_apply_V_num_read,
        device_dramC_write_req_apply_V_addr_dout,
        device_dramC_write_req_apply_V_addr_empty_n,
        device_dramC_write_req_apply_V_addr_read
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output ap_ready; output ap_continue;
output   dramC_write_req_data_V_last_din;
input   dramC_write_req_data_V_last_full_n;
output   dramC_write_req_data_V_last_write;
output  [511:0] dramC_write_req_data_V_data_V_din;
input   dramC_write_req_data_V_data_V_full_n;
output   dramC_write_req_data_V_data_V_write;
output  [7:0] dramC_write_req_apply_V_num_din;
input   dramC_write_req_apply_V_num_full_n;
output   dramC_write_req_apply_V_num_write;
output  [63:0] dramC_write_req_apply_V_addr_din;
input   dramC_write_req_apply_V_addr_full_n;
output   dramC_write_req_apply_V_addr_write;
input   host_dramC_write_req_data_V_last_dout;
input   host_dramC_write_req_data_V_last_empty_n;
output   host_dramC_write_req_data_V_last_read;
input  [511:0] host_dramC_write_req_data_V_data_V_dout;
input   host_dramC_write_req_data_V_data_V_empty_n;
output   host_dramC_write_req_data_V_data_V_read;
input  [7:0] host_dramC_write_req_apply_V_num_dout;
input   host_dramC_write_req_apply_V_num_empty_n;
output   host_dramC_write_req_apply_V_num_read;
input  [63:0] host_dramC_write_req_apply_V_addr_dout;
input   host_dramC_write_req_apply_V_addr_empty_n;
output   host_dramC_write_req_apply_V_addr_read;
input   device_dramC_write_req_data_V_last_dout;
input   device_dramC_write_req_data_V_last_empty_n;
output   device_dramC_write_req_data_V_last_read;
input  [511:0] device_dramC_write_req_data_V_data_V_dout;
input   device_dramC_write_req_data_V_data_V_empty_n;
output   device_dramC_write_req_data_V_data_V_read;
input  [7:0] device_dramC_write_req_apply_V_num_dout;
input   device_dramC_write_req_apply_V_num_empty_n;
output   device_dramC_write_req_apply_V_num_read;
input  [63:0] device_dramC_write_req_apply_V_addr_dout;
input   device_dramC_write_req_apply_V_addr_empty_n;
output   device_dramC_write_req_apply_V_addr_read;

reg ap_idle;
reg dramC_write_req_data_V_last_din;
reg[511:0] dramC_write_req_data_V_data_V_din;
reg[7:0] dramC_write_req_apply_V_num_din;
reg[63:0] dramC_write_req_apply_V_addr_din;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    dramC_write_req_data_V_last_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_reg_386;
reg   [0:0] tmp_2_reg_390;
reg   [0:0] empty_n_6_reg_412;
reg   [0:0] tmp_6_reg_394;
reg   [0:0] empty_n_7_reg_398;
reg    dramC_write_req_data_V_data_V_blk_n;
reg    dramC_write_req_apply_V_num_blk_n;
reg   [0:0] empty_n_4_reg_426;
reg   [0:0] empty_n_5_reg_440;
reg    dramC_write_req_apply_V_addr_blk_n;
wire   [0:0] tmp_fu_282_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    dramC_write_req_data_V_last1_status;
reg    ap_predicate_op78_write_state3;
reg    ap_predicate_op79_write_state3;
wire    dramC_write_req_apply_V_num1_status;
reg    ap_predicate_op80_write_state3;
reg    ap_predicate_op81_write_state3;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] tmp_2_fu_288_p2;
wire   [0:0] tmp_6_fu_294_p2;
wire   [0:0] empty_n_7_fu_300_p1;
reg   [0:0] tmp_last_1_reg_402;
reg   [511:0] tmp_data_V_1_reg_407;
wire   [0:0] empty_n_6_fu_325_p1;
reg   [0:0] tmp_last_reg_416;
reg   [511:0] tmp_data_V_reg_421;
wire   [0:0] empty_n_4_fu_352_p1;
reg   [7:0] tmp_num_reg_430;
reg   [63:0] tmp_addr_reg_435;
wire   [0:0] empty_n_5_fu_364_p1;
reg   [7:0] tmp_num_2_reg_444;
reg   [63:0] tmp_addr_2_reg_449;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    device_dramC_write_req_data_V_last0_update;
wire   [0:0] empty_n_3_nbread_fu_212_p3_0;
reg    host_dramC_write_req_data_V_last0_update;
wire   [0:0] empty_n_2_nbread_fu_220_p3_0;
reg    host_dramC_write_req_apply_V_num0_update;
wire   [0:0] empty_n_nbread_fu_228_p3_0;
reg    device_dramC_write_req_apply_V_num0_update;
wire   [0:0] empty_n_1_nbread_fu_236_p3_0;
reg    dramC_write_req_data_V_last1_update;
reg    ap_block_pp0_stage0_01001;
reg    dramC_write_req_apply_V_num1_update;
reg   [31:0] state_fu_208;
wire   [31:0] p_state_cast_cast_fu_312_p3;
wire   [31:0] p_state_cast_fu_343_p1;
wire   [0:0] p_state_cast_cast_fu_312_p0;
wire   [0:0] not_tmp_last_4_fu_337_p0;
wire   [0:0] not_tmp_last_4_fu_337_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_239;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((empty_n_6_fu_325_p1 == 1'd1) & (tmp_2_fu_288_p2 == 1'd1) & (tmp_fu_282_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
                state_fu_208[1 : 0] <= p_state_cast_fu_343_p1[1 : 0];
    end else if ((((empty_n_4_fu_352_p1 == 1'd1) & (tmp_fu_282_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_2_fu_288_p2 == 1'd1) & (empty_n_6_fu_325_p1 == 1'd0) & (tmp_fu_282_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
                state_fu_208[0] <= 1'b1;
        state_fu_208[1] <= 1'b0;
    end else if (((empty_n_7_fu_300_p1 == 1'd1) & (tmp_6_fu_294_p2 == 1'd1) & (tmp_2_fu_288_p2 == 1'd0) & (tmp_fu_282_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
                state_fu_208[1 : 0] <= p_state_cast_cast_fu_312_p3[1 : 0];
    end else if ((((empty_n_5_fu_364_p1 == 1'd1) & (tmp_fu_282_p2 == 1'd1) & (empty_n_4_fu_352_p1 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_6_fu_294_p2 == 1'd1) & (empty_n_7_fu_300_p1 == 1'd0) & (tmp_2_fu_288_p2 == 1'd0) & (tmp_fu_282_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
                state_fu_208[0] <= 1'b0;
        state_fu_208[1] <= 1'b1;
    end else if ((((tmp_fu_282_p2 == 1'd1) & (empty_n_5_fu_364_p1 == 1'd0) & (empty_n_4_fu_352_p1 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
                state_fu_208[0] <= 1'b0;
        state_fu_208[1] <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_282_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_n_4_reg_426 <= empty_n_nbread_fu_228_p3_0;
        tmp_addr_reg_435 <= host_dramC_write_req_apply_V_addr_dout;
        tmp_num_reg_430 <= host_dramC_write_req_apply_V_num_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_282_p2 == 1'd1) & (empty_n_4_fu_352_p1 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_n_5_reg_440 <= empty_n_1_nbread_fu_236_p3_0;
        tmp_addr_2_reg_449 <= device_dramC_write_req_apply_V_addr_dout;
        tmp_num_2_reg_444 <= device_dramC_write_req_apply_V_num_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_288_p2 == 1'd1) & (tmp_fu_282_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_n_6_reg_412 <= empty_n_2_nbread_fu_220_p3_0;
        tmp_data_V_reg_421 <= host_dramC_write_req_data_V_data_V_dout;
        tmp_last_reg_416 <= host_dramC_write_req_data_V_last_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_fu_294_p2 == 1'd1) & (tmp_2_fu_288_p2 == 1'd0) & (tmp_fu_282_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_n_7_reg_398 <= empty_n_3_nbread_fu_212_p3_0;
        tmp_data_V_1_reg_407 <= device_dramC_write_req_data_V_data_V_dout;
        tmp_last_1_reg_402 <= device_dramC_write_req_data_V_last_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_282_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_2_reg_390 <= tmp_2_fu_288_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_288_p2 == 1'd0) & (tmp_fu_282_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_6_reg_394 <= tmp_6_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_reg_386 <= tmp_fu_282_p2;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_282_p2 == 1'd1) & (empty_n_4_fu_352_p1 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((device_dramC_write_req_apply_V_num_empty_n & device_dramC_write_req_apply_V_addr_empty_n) == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        device_dramC_write_req_apply_V_num0_update = 1'b1;
    end else begin
        device_dramC_write_req_apply_V_num0_update = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_6_fu_294_p2 == 1'd1) & (tmp_2_fu_288_p2 == 1'd0) & (tmp_fu_282_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((device_dramC_write_req_data_V_last_empty_n & device_dramC_write_req_data_V_data_V_empty_n) == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        device_dramC_write_req_data_V_last0_update = 1'b1;
    end else begin
        device_dramC_write_req_data_V_last0_update = 1'b0;
    end
end

always @ (*) begin
    if ((((empty_n_5_reg_440 == 1'd1) & (empty_n_4_reg_426 == 1'd0) & (tmp_reg_386 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((empty_n_4_reg_426 == 1'd1) & (tmp_reg_386 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        dramC_write_req_apply_V_addr_blk_n = dramC_write_req_apply_V_addr_full_n;
    end else begin
        dramC_write_req_apply_V_addr_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_239)) begin
        if ((ap_predicate_op81_write_state3 == 1'b1)) begin
            dramC_write_req_apply_V_addr_din = tmp_addr_reg_435;
        end else if ((ap_predicate_op80_write_state3 == 1'b1)) begin
            dramC_write_req_apply_V_addr_din = tmp_addr_2_reg_449;
        end else begin
            dramC_write_req_apply_V_addr_din = 'bx;
        end
    end else begin
        dramC_write_req_apply_V_addr_din = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op81_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op80_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        dramC_write_req_apply_V_num1_update = 1'b1;
    end else begin
        dramC_write_req_apply_V_num1_update = 1'b0;
    end
end

always @ (*) begin
    if ((((empty_n_5_reg_440 == 1'd1) & (empty_n_4_reg_426 == 1'd0) & (tmp_reg_386 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((empty_n_4_reg_426 == 1'd1) & (tmp_reg_386 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        dramC_write_req_apply_V_num_blk_n = dramC_write_req_apply_V_num_full_n;
    end else begin
        dramC_write_req_apply_V_num_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_239)) begin
        if ((ap_predicate_op81_write_state3 == 1'b1)) begin
            dramC_write_req_apply_V_num_din = tmp_num_reg_430;
        end else if ((ap_predicate_op80_write_state3 == 1'b1)) begin
            dramC_write_req_apply_V_num_din = tmp_num_2_reg_444;
        end else begin
            dramC_write_req_apply_V_num_din = 'bx;
        end
    end else begin
        dramC_write_req_apply_V_num_din = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_6_reg_394 == 1'd1) & (empty_n_7_reg_398 == 1'd1) & (tmp_2_reg_390 == 1'd0) & (tmp_reg_386 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((empty_n_6_reg_412 == 1'd1) & (tmp_2_reg_390 == 1'd1) & (tmp_reg_386 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        dramC_write_req_data_V_data_V_blk_n = dramC_write_req_data_V_data_V_full_n;
    end else begin
        dramC_write_req_data_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_239)) begin
        if ((ap_predicate_op79_write_state3 == 1'b1)) begin
            dramC_write_req_data_V_data_V_din = tmp_data_V_reg_421;
        end else if ((ap_predicate_op78_write_state3 == 1'b1)) begin
            dramC_write_req_data_V_data_V_din = tmp_data_V_1_reg_407;
        end else begin
            dramC_write_req_data_V_data_V_din = 'bx;
        end
    end else begin
        dramC_write_req_data_V_data_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op79_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op78_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        dramC_write_req_data_V_last1_update = 1'b1;
    end else begin
        dramC_write_req_data_V_last1_update = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_6_reg_394 == 1'd1) & (empty_n_7_reg_398 == 1'd1) & (tmp_2_reg_390 == 1'd0) & (tmp_reg_386 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((empty_n_6_reg_412 == 1'd1) & (tmp_2_reg_390 == 1'd1) & (tmp_reg_386 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        dramC_write_req_data_V_last_blk_n = dramC_write_req_data_V_last_full_n;
    end else begin
        dramC_write_req_data_V_last_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_239)) begin
        if ((ap_predicate_op79_write_state3 == 1'b1)) begin
            dramC_write_req_data_V_last_din = tmp_last_reg_416;
        end else if ((ap_predicate_op78_write_state3 == 1'b1)) begin
            dramC_write_req_data_V_last_din = tmp_last_1_reg_402;
        end else begin
            dramC_write_req_data_V_last_din = 'bx;
        end
    end else begin
        dramC_write_req_data_V_last_din = 'bx;
    end
end

always @ (*) begin
    if (((tmp_fu_282_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((host_dramC_write_req_apply_V_num_empty_n & host_dramC_write_req_apply_V_addr_empty_n) == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        host_dramC_write_req_apply_V_num0_update = 1'b1;
    end else begin
        host_dramC_write_req_apply_V_num0_update = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_2_fu_288_p2 == 1'd1) & (tmp_fu_282_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((host_dramC_write_req_data_V_last_empty_n & host_dramC_write_req_data_V_data_V_empty_n) == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        host_dramC_write_req_data_V_last0_update = 1'b1;
    end else begin
        host_dramC_write_req_data_V_last0_update = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((dramC_write_req_apply_V_num1_status == 1'b0) & (ap_predicate_op81_write_state3 == 1'b1)) | ((dramC_write_req_apply_V_num1_status == 1'b0) & (ap_predicate_op80_write_state3 == 1'b1)) | ((dramC_write_req_data_V_last1_status == 1'b0) & (ap_predicate_op79_write_state3 == 1'b1)) | ((dramC_write_req_data_V_last1_status == 1'b0) & (ap_predicate_op78_write_state3 == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((dramC_write_req_apply_V_num1_status == 1'b0) & (ap_predicate_op81_write_state3 == 1'b1)) | ((dramC_write_req_apply_V_num1_status == 1'b0) & (ap_predicate_op80_write_state3 == 1'b1)) | ((dramC_write_req_data_V_last1_status == 1'b0) & (ap_predicate_op79_write_state3 == 1'b1)) | ((dramC_write_req_data_V_last1_status == 1'b0) & (ap_predicate_op78_write_state3 == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((dramC_write_req_apply_V_num1_status == 1'b0) & (ap_predicate_op81_write_state3 == 1'b1)) | ((dramC_write_req_apply_V_num1_status == 1'b0) & (ap_predicate_op80_write_state3 == 1'b1)) | ((dramC_write_req_data_V_last1_status == 1'b0) & (ap_predicate_op79_write_state3 == 1'b1)) | ((dramC_write_req_data_V_last1_status == 1'b0) & (ap_predicate_op78_write_state3 == 1'b1))));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((dramC_write_req_apply_V_num1_status == 1'b0) & (ap_predicate_op81_write_state3 == 1'b1)) | ((dramC_write_req_apply_V_num1_status == 1'b0) & (ap_predicate_op80_write_state3 == 1'b1)) | ((dramC_write_req_data_V_last1_status == 1'b0) & (ap_predicate_op79_write_state3 == 1'b1)) | ((dramC_write_req_data_V_last1_status == 1'b0) & (ap_predicate_op78_write_state3 == 1'b1)));
end

always @ (*) begin
    ap_condition_239 = ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_done = 1'b0;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op78_write_state3 = ((tmp_6_reg_394 == 1'd1) & (empty_n_7_reg_398 == 1'd1) & (tmp_2_reg_390 == 1'd0) & (tmp_reg_386 == 1'd0));
end

always @ (*) begin
    ap_predicate_op79_write_state3 = ((empty_n_6_reg_412 == 1'd1) & (tmp_2_reg_390 == 1'd1) & (tmp_reg_386 == 1'd0));
end

always @ (*) begin
    ap_predicate_op80_write_state3 = ((empty_n_5_reg_440 == 1'd1) & (empty_n_4_reg_426 == 1'd0) & (tmp_reg_386 == 1'd1));
end

always @ (*) begin
    ap_predicate_op81_write_state3 = ((empty_n_4_reg_426 == 1'd1) & (tmp_reg_386 == 1'd1));
end

assign ap_ready = 1'b0;

assign device_dramC_write_req_apply_V_addr_read = device_dramC_write_req_apply_V_num0_update;

assign device_dramC_write_req_apply_V_num_read = device_dramC_write_req_apply_V_num0_update;

assign device_dramC_write_req_data_V_data_V_read = device_dramC_write_req_data_V_last0_update;

assign device_dramC_write_req_data_V_last_read = device_dramC_write_req_data_V_last0_update;

assign dramC_write_req_apply_V_addr_write = dramC_write_req_apply_V_num1_update;

assign dramC_write_req_apply_V_num1_status = (dramC_write_req_apply_V_num_full_n & dramC_write_req_apply_V_addr_full_n);

assign dramC_write_req_apply_V_num_write = dramC_write_req_apply_V_num1_update;

assign dramC_write_req_data_V_data_V_write = dramC_write_req_data_V_last1_update;

assign dramC_write_req_data_V_last1_status = (dramC_write_req_data_V_last_full_n & dramC_write_req_data_V_data_V_full_n);

assign dramC_write_req_data_V_last_write = dramC_write_req_data_V_last1_update;

assign empty_n_1_nbread_fu_236_p3_0 = (device_dramC_write_req_apply_V_num_empty_n & device_dramC_write_req_apply_V_addr_empty_n);

assign empty_n_2_nbread_fu_220_p3_0 = (host_dramC_write_req_data_V_last_empty_n & host_dramC_write_req_data_V_data_V_empty_n);

assign empty_n_3_nbread_fu_212_p3_0 = (device_dramC_write_req_data_V_last_empty_n & device_dramC_write_req_data_V_data_V_empty_n);

assign empty_n_4_fu_352_p1 = empty_n_nbread_fu_228_p3_0;

assign empty_n_5_fu_364_p1 = empty_n_1_nbread_fu_236_p3_0;

assign empty_n_6_fu_325_p1 = empty_n_2_nbread_fu_220_p3_0;

assign empty_n_7_fu_300_p1 = empty_n_3_nbread_fu_212_p3_0;

assign empty_n_nbread_fu_228_p3_0 = (host_dramC_write_req_apply_V_num_empty_n & host_dramC_write_req_apply_V_addr_empty_n);

assign host_dramC_write_req_apply_V_addr_read = host_dramC_write_req_apply_V_num0_update;

assign host_dramC_write_req_apply_V_num_read = host_dramC_write_req_apply_V_num0_update;

assign host_dramC_write_req_data_V_data_V_read = host_dramC_write_req_data_V_last0_update;

assign host_dramC_write_req_data_V_last_read = host_dramC_write_req_data_V_last0_update;

assign not_tmp_last_4_fu_337_p0 = host_dramC_write_req_data_V_last_dout;

assign not_tmp_last_4_fu_337_p2 = (not_tmp_last_4_fu_337_p0 ^ 1'd1);

assign p_state_cast_cast_fu_312_p0 = device_dramC_write_req_data_V_last_dout;

assign p_state_cast_cast_fu_312_p3 = ((p_state_cast_cast_fu_312_p0[0:0] === 1'b1) ? 32'd0 : 32'd2);

assign p_state_cast_fu_343_p1 = not_tmp_last_4_fu_337_p2;

assign tmp_2_fu_288_p2 = ((state_fu_208 == 32'd1) ? 1'b1 : 1'b0);

assign tmp_6_fu_294_p2 = ((state_fu_208 == 32'd2) ? 1'b1 : 1'b0);

assign tmp_fu_282_p2 = ((state_fu_208 == 32'd0) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    state_fu_208[31:2] <= 30'b000000000000000000000000000000;
end

endmodule //dramC_write_multiplexer
