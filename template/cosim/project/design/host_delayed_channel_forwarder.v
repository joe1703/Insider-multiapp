// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.op
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="host_delayed_channel_forwarder,hls_ip_2017_4_op,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.997000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3090,HLS_SYN_LUT=366}" *)

module host_delayed_channel_forwarder (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
ap_continue,
        ap_idle,
        ap_ready,
        host_dram_write_req_data_V_last_dout,
        host_dram_write_req_data_V_last_empty_n,
        host_dram_write_req_data_V_last_read,
        host_dram_write_req_data_V_data_V_dout,
        host_dram_write_req_data_V_data_V_empty_n,
        host_dram_write_req_data_V_data_V_read,
        host_dram_write_req_data_delayed_V_last_din,
        host_dram_write_req_data_delayed_V_last_full_n,
        host_dram_write_req_data_delayed_V_last_write,
        host_dram_write_req_data_delayed_V_data_V_din,
        host_dram_write_req_data_delayed_V_data_V_full_n,
        host_dram_write_req_data_delayed_V_data_V_write,
        host_dram_read_resp_delayed_V_last_dout,
        host_dram_read_resp_delayed_V_last_empty_n,
        host_dram_read_resp_delayed_V_last_read,
        host_dram_read_resp_delayed_V_data_V_dout,
        host_dram_read_resp_delayed_V_data_V_empty_n,
        host_dram_read_resp_delayed_V_data_V_read,
        host_dram_read_resp_V_last_din,
        host_dram_read_resp_V_last_full_n,
        host_dram_read_resp_V_last_write,
        host_dram_read_resp_V_data_V_din,
        host_dram_read_resp_V_data_V_full_n,
        host_dram_read_resp_V_data_V_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output ap_ready; output ap_continue;
input   host_dram_write_req_data_V_last_dout;
input   host_dram_write_req_data_V_last_empty_n;
output   host_dram_write_req_data_V_last_read;
input  [511:0] host_dram_write_req_data_V_data_V_dout;
input   host_dram_write_req_data_V_data_V_empty_n;
output   host_dram_write_req_data_V_data_V_read;
output   host_dram_write_req_data_delayed_V_last_din;
input   host_dram_write_req_data_delayed_V_last_full_n;
output   host_dram_write_req_data_delayed_V_last_write;
output  [511:0] host_dram_write_req_data_delayed_V_data_V_din;
input   host_dram_write_req_data_delayed_V_data_V_full_n;
output   host_dram_write_req_data_delayed_V_data_V_write;
input   host_dram_read_resp_delayed_V_last_dout;
input   host_dram_read_resp_delayed_V_last_empty_n;
output   host_dram_read_resp_delayed_V_last_read;
input  [511:0] host_dram_read_resp_delayed_V_data_V_dout;
input   host_dram_read_resp_delayed_V_data_V_empty_n;
output   host_dram_read_resp_delayed_V_data_V_read;
output   host_dram_read_resp_V_last_din;
input   host_dram_read_resp_V_last_full_n;
output   host_dram_read_resp_V_last_write;
output  [511:0] host_dram_read_resp_V_data_V_din;
input   host_dram_read_resp_V_data_V_full_n;
output   host_dram_read_resp_V_data_V_write;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] valid_write_req_data_reg_190;
reg   [0:0] valid_read_resp_reg_202;
reg   [511:0] read_resp_1_s_reg_214;
reg   [0:0] read_resp_0_s_reg_225;
reg   [511:0] write_req_data_1_s_reg_236;
reg   [0:0] write_req_data_0_s_reg_247;
wire   [0:0] empty_n_4_fu_392_p1;
reg   [0:0] empty_n_4_reg_442;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] ap_phi_mux_valid_write_req_data_phi_fu_194_p4;
wire   [0:0] empty_n_5_fu_404_p1;
reg   [0:0] empty_n_5_reg_460;
reg   [0:0] ap_phi_mux_valid_read_resp_phi_fu_206_p4;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg   [0:0] ap_phi_mux_valid_write_req_data_3_phi_fu_318_p4;
wire    ap_block_pp0_stage0;
reg   [0:0] ap_phi_mux_valid_read_resp_3_phi_fu_385_p4;
reg   [511:0] ap_phi_mux_read_resp_1_2_phi_fu_361_p4;
reg   [0:0] ap_phi_mux_read_resp_0_2_phi_fu_373_p4;
reg   [511:0] ap_phi_mux_write_req_data_1_2_phi_fu_294_p4;
reg   [0:0] ap_phi_mux_write_req_data_0_2_phi_fu_306_p4;
reg   [511:0] ap_phi_mux_tmp_data_V_phi_fu_261_p4;
reg   [511:0] ap_phi_reg_pp0_iter1_tmp_data_V_reg_258;
wire   [511:0] ap_phi_reg_pp0_iter0_tmp_data_V_reg_258;
reg   [0:0] ap_phi_mux_tmp_last_phi_fu_272_p4;
reg   [0:0] ap_phi_reg_pp0_iter1_tmp_last_reg_269;
wire   [0:0] ap_phi_reg_pp0_iter0_tmp_last_reg_269;
reg   [0:0] ap_phi_mux_valid_write_req_data_1_phi_fu_283_p4;
reg   [0:0] ap_phi_reg_pp0_iter1_valid_write_req_data_1_reg_280;
wire   [0:0] ap_phi_reg_pp0_iter0_valid_write_req_data_1_reg_280;
reg   [511:0] ap_phi_reg_pp0_iter1_write_req_data_1_2_reg_290;
wire   [511:0] ap_phi_reg_pp0_iter0_write_req_data_1_2_reg_290;
reg   [0:0] ap_phi_reg_pp0_iter1_write_req_data_0_2_reg_302;
wire   [0:0] ap_phi_reg_pp0_iter0_write_req_data_0_2_reg_302;
wire   [0:0] p_valid_write_req_data_1_fu_422_p2;
reg   [0:0] ap_phi_reg_pp0_iter1_valid_write_req_data_3_reg_314;
wire   [0:0] ap_phi_reg_pp0_iter0_valid_write_req_data_3_reg_314;
reg   [511:0] ap_phi_mux_tmp_data_V_2_phi_fu_328_p4;
reg   [511:0] ap_phi_reg_pp0_iter1_tmp_data_V_2_reg_325;
wire   [511:0] ap_phi_reg_pp0_iter0_tmp_data_V_2_reg_325;
reg   [0:0] ap_phi_mux_tmp_last_2_phi_fu_339_p4;
reg   [0:0] ap_phi_reg_pp0_iter1_tmp_last_2_reg_336;
wire   [0:0] ap_phi_reg_pp0_iter0_tmp_last_2_reg_336;
reg   [0:0] ap_phi_mux_valid_read_resp_1_phi_fu_350_p4;
reg   [0:0] ap_phi_reg_pp0_iter1_valid_read_resp_1_reg_347;
wire   [0:0] ap_phi_reg_pp0_iter0_valid_read_resp_1_reg_347;
reg   [511:0] ap_phi_reg_pp0_iter1_read_resp_1_2_reg_357;
wire   [511:0] ap_phi_reg_pp0_iter0_read_resp_1_2_reg_357;
reg   [0:0] ap_phi_reg_pp0_iter1_read_resp_0_2_reg_369;
wire   [0:0] ap_phi_reg_pp0_iter0_read_resp_0_2_reg_369;
wire   [0:0] p_valid_read_resp_1_fu_435_p2;
reg   [0:0] ap_phi_reg_pp0_iter1_valid_read_resp_3_reg_381;
wire   [0:0] ap_phi_reg_pp0_iter0_valid_read_resp_3_reg_381;
reg    host_dram_write_req_data_V_last0_update;
wire   [0:0] empty_n_nbread_fu_154_p3_0;
reg    host_dram_read_resp_delayed_V_last0_update;
wire   [0:0] empty_n_1_nbread_fu_162_p3_0;
reg    host_dram_write_req_data_delayed_V_last1_update;
wire   [0:0] full_n_nbwrite_fu_170_p5;
wire    ap_block_pp0_stage0_01001;
reg    host_dram_read_resp_V_last1_update;
wire   [0:0] full_n_1_nbwrite_fu_180_p5;
wire   [0:0] not_full_n_i_fu_416_p2;
wire   [0:0] not_full_n_i5_fu_429_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_154;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_154)) begin
        if (((ap_phi_mux_valid_read_resp_phi_fu_206_p4 == 1'd0) & (empty_n_5_fu_404_p1 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_read_resp_0_2_reg_369 <= host_dram_read_resp_delayed_V_last_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_read_resp_0_2_reg_369 <= ap_phi_reg_pp0_iter0_read_resp_0_2_reg_369;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_154)) begin
        if (((ap_phi_mux_valid_read_resp_phi_fu_206_p4 == 1'd0) & (empty_n_5_fu_404_p1 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_read_resp_1_2_reg_357 <= host_dram_read_resp_delayed_V_data_V_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_read_resp_1_2_reg_357 <= ap_phi_reg_pp0_iter0_read_resp_1_2_reg_357;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_154)) begin
        if (((empty_n_5_fu_404_p1 == 1'd1) & (ap_phi_mux_valid_read_resp_phi_fu_206_p4 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_tmp_data_V_2_reg_325 <= host_dram_read_resp_delayed_V_data_V_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_tmp_data_V_2_reg_325 <= ap_phi_reg_pp0_iter0_tmp_data_V_2_reg_325;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_154)) begin
        if (((empty_n_4_fu_392_p1 == 1'd1) & (ap_phi_mux_valid_write_req_data_phi_fu_194_p4 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_tmp_data_V_reg_258 <= host_dram_write_req_data_V_data_V_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_tmp_data_V_reg_258 <= ap_phi_reg_pp0_iter0_tmp_data_V_reg_258;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_154)) begin
        if (((empty_n_5_fu_404_p1 == 1'd1) & (ap_phi_mux_valid_read_resp_phi_fu_206_p4 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_tmp_last_2_reg_336 <= host_dram_read_resp_delayed_V_last_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_tmp_last_2_reg_336 <= ap_phi_reg_pp0_iter0_tmp_last_2_reg_336;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_154)) begin
        if (((empty_n_4_fu_392_p1 == 1'd1) & (ap_phi_mux_valid_write_req_data_phi_fu_194_p4 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_tmp_last_reg_269 <= host_dram_write_req_data_V_last_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_tmp_last_reg_269 <= ap_phi_reg_pp0_iter0_tmp_last_reg_269;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_154)) begin
        if (((empty_n_5_fu_404_p1 == 1'd1) & (ap_phi_mux_valid_read_resp_phi_fu_206_p4 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_valid_read_resp_1_reg_347 <= empty_n_1_nbread_fu_162_p3_0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_valid_read_resp_1_reg_347 <= ap_phi_reg_pp0_iter0_valid_read_resp_1_reg_347;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_154)) begin
        if (((ap_phi_mux_valid_read_resp_phi_fu_206_p4 == 1'd0) & (empty_n_5_fu_404_p1 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_valid_read_resp_3_reg_381 <= empty_n_1_nbread_fu_162_p3_0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_valid_read_resp_3_reg_381 <= ap_phi_reg_pp0_iter0_valid_read_resp_3_reg_381;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_154)) begin
        if (((empty_n_4_fu_392_p1 == 1'd1) & (ap_phi_mux_valid_write_req_data_phi_fu_194_p4 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_valid_write_req_data_1_reg_280 <= empty_n_nbread_fu_154_p3_0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_valid_write_req_data_1_reg_280 <= ap_phi_reg_pp0_iter0_valid_write_req_data_1_reg_280;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_154)) begin
        if (((empty_n_4_fu_392_p1 == 1'd0) & (ap_phi_mux_valid_write_req_data_phi_fu_194_p4 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_valid_write_req_data_3_reg_314 <= empty_n_nbread_fu_154_p3_0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_valid_write_req_data_3_reg_314 <= ap_phi_reg_pp0_iter0_valid_write_req_data_3_reg_314;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_154)) begin
        if (((empty_n_4_fu_392_p1 == 1'd0) & (ap_phi_mux_valid_write_req_data_phi_fu_194_p4 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_write_req_data_0_2_reg_302 <= host_dram_write_req_data_V_last_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_write_req_data_0_2_reg_302 <= ap_phi_reg_pp0_iter0_write_req_data_0_2_reg_302;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_154)) begin
        if (((empty_n_4_fu_392_p1 == 1'd0) & (ap_phi_mux_valid_write_req_data_phi_fu_194_p4 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_write_req_data_1_2_reg_290 <= host_dram_write_req_data_V_data_V_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_write_req_data_1_2_reg_290 <= ap_phi_reg_pp0_iter0_write_req_data_1_2_reg_290;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        valid_read_resp_reg_202 <= ap_phi_mux_valid_read_resp_3_phi_fu_385_p4;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        valid_read_resp_reg_202 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        valid_write_req_data_reg_190 <= ap_phi_mux_valid_write_req_data_3_phi_fu_318_p4;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        valid_write_req_data_reg_190 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_phi_mux_valid_write_req_data_phi_fu_194_p4 == 1'd0))) begin
        empty_n_4_reg_442 <= empty_n_nbread_fu_154_p3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_phi_mux_valid_read_resp_phi_fu_206_p4 == 1'd0))) begin
        empty_n_5_reg_460 <= empty_n_1_nbread_fu_162_p3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        read_resp_0_s_reg_225 <= ap_phi_mux_read_resp_0_2_phi_fu_373_p4;
        read_resp_1_s_reg_214 <= ap_phi_mux_read_resp_1_2_phi_fu_361_p4;
        write_req_data_0_s_reg_247 <= ap_phi_mux_write_req_data_0_2_phi_fu_306_p4;
        write_req_data_1_s_reg_236 <= ap_phi_mux_write_req_data_1_2_phi_fu_294_p4;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & ((valid_read_resp_reg_202 == 1'd1) | (empty_n_5_reg_460 == 1'd1)))) begin
        ap_phi_mux_read_resp_0_2_phi_fu_373_p4 = ap_phi_mux_tmp_last_2_phi_fu_339_p4;
    end else begin
        ap_phi_mux_read_resp_0_2_phi_fu_373_p4 = ap_phi_reg_pp0_iter1_read_resp_0_2_reg_369;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & ((valid_read_resp_reg_202 == 1'd1) | (empty_n_5_reg_460 == 1'd1)))) begin
        ap_phi_mux_read_resp_1_2_phi_fu_361_p4 = ap_phi_mux_tmp_data_V_2_phi_fu_328_p4;
    end else begin
        ap_phi_mux_read_resp_1_2_phi_fu_361_p4 = ap_phi_reg_pp0_iter1_read_resp_1_2_reg_357;
    end
end

always @ (*) begin
    if (((valid_read_resp_reg_202 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_tmp_data_V_2_phi_fu_328_p4 = read_resp_1_s_reg_214;
    end else begin
        ap_phi_mux_tmp_data_V_2_phi_fu_328_p4 = ap_phi_reg_pp0_iter1_tmp_data_V_2_reg_325;
    end
end

always @ (*) begin
    if (((valid_write_req_data_reg_190 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_tmp_data_V_phi_fu_261_p4 = write_req_data_1_s_reg_236;
    end else begin
        ap_phi_mux_tmp_data_V_phi_fu_261_p4 = ap_phi_reg_pp0_iter1_tmp_data_V_reg_258;
    end
end

always @ (*) begin
    if (((valid_read_resp_reg_202 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_tmp_last_2_phi_fu_339_p4 = read_resp_0_s_reg_225;
    end else begin
        ap_phi_mux_tmp_last_2_phi_fu_339_p4 = ap_phi_reg_pp0_iter1_tmp_last_2_reg_336;
    end
end

always @ (*) begin
    if (((valid_write_req_data_reg_190 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_tmp_last_phi_fu_272_p4 = write_req_data_0_s_reg_247;
    end else begin
        ap_phi_mux_tmp_last_phi_fu_272_p4 = ap_phi_reg_pp0_iter1_tmp_last_reg_269;
    end
end

always @ (*) begin
    if (((valid_read_resp_reg_202 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_valid_read_resp_1_phi_fu_350_p4 = valid_read_resp_reg_202;
    end else begin
        ap_phi_mux_valid_read_resp_1_phi_fu_350_p4 = ap_phi_reg_pp0_iter1_valid_read_resp_1_reg_347;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & ((valid_read_resp_reg_202 == 1'd1) | (empty_n_5_reg_460 == 1'd1)))) begin
        ap_phi_mux_valid_read_resp_3_phi_fu_385_p4 = p_valid_read_resp_1_fu_435_p2;
    end else begin
        ap_phi_mux_valid_read_resp_3_phi_fu_385_p4 = ap_phi_reg_pp0_iter1_valid_read_resp_3_reg_381;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_valid_read_resp_phi_fu_206_p4 = ap_phi_mux_valid_read_resp_3_phi_fu_385_p4;
    end else begin
        ap_phi_mux_valid_read_resp_phi_fu_206_p4 = valid_read_resp_reg_202;
    end
end

always @ (*) begin
    if (((valid_write_req_data_reg_190 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_valid_write_req_data_1_phi_fu_283_p4 = valid_write_req_data_reg_190;
    end else begin
        ap_phi_mux_valid_write_req_data_1_phi_fu_283_p4 = ap_phi_reg_pp0_iter1_valid_write_req_data_1_reg_280;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & ((empty_n_4_reg_442 == 1'd1) | (valid_write_req_data_reg_190 == 1'd1)))) begin
        ap_phi_mux_valid_write_req_data_3_phi_fu_318_p4 = p_valid_write_req_data_1_fu_422_p2;
    end else begin
        ap_phi_mux_valid_write_req_data_3_phi_fu_318_p4 = ap_phi_reg_pp0_iter1_valid_write_req_data_3_reg_314;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_valid_write_req_data_phi_fu_194_p4 = ap_phi_mux_valid_write_req_data_3_phi_fu_318_p4;
    end else begin
        ap_phi_mux_valid_write_req_data_phi_fu_194_p4 = valid_write_req_data_reg_190;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & ((empty_n_4_reg_442 == 1'd1) | (valid_write_req_data_reg_190 == 1'd1)))) begin
        ap_phi_mux_write_req_data_0_2_phi_fu_306_p4 = ap_phi_mux_tmp_last_phi_fu_272_p4;
    end else begin
        ap_phi_mux_write_req_data_0_2_phi_fu_306_p4 = ap_phi_reg_pp0_iter1_write_req_data_0_2_reg_302;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & ((empty_n_4_reg_442 == 1'd1) | (valid_write_req_data_reg_190 == 1'd1)))) begin
        ap_phi_mux_write_req_data_1_2_phi_fu_294_p4 = ap_phi_mux_tmp_data_V_phi_fu_261_p4;
    end else begin
        ap_phi_mux_write_req_data_1_2_phi_fu_294_p4 = ap_phi_reg_pp0_iter1_write_req_data_1_2_reg_290;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((host_dram_read_resp_V_last_full_n & host_dram_read_resp_V_data_V_full_n) == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & ((valid_read_resp_reg_202 == 1'd1) | (empty_n_5_reg_460 == 1'd1)))) begin
        host_dram_read_resp_V_last1_update = 1'b1;
    end else begin
        host_dram_read_resp_V_last1_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((host_dram_read_resp_delayed_V_last_empty_n & host_dram_read_resp_delayed_V_data_V_empty_n) == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_phi_mux_valid_read_resp_phi_fu_206_p4 == 1'd0))) begin
        host_dram_read_resp_delayed_V_last0_update = 1'b1;
    end else begin
        host_dram_read_resp_delayed_V_last0_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((host_dram_write_req_data_V_last_empty_n & host_dram_write_req_data_V_data_V_empty_n) == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_phi_mux_valid_write_req_data_phi_fu_194_p4 == 1'd0))) begin
        host_dram_write_req_data_V_last0_update = 1'b1;
    end else begin
        host_dram_write_req_data_V_last0_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((host_dram_write_req_data_delayed_V_last_full_n & host_dram_write_req_data_delayed_V_data_V_full_n) == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & ((empty_n_4_reg_442 == 1'd1) | (valid_write_req_data_reg_190 == 1'd1)))) begin
        host_dram_write_req_data_delayed_V_last1_update = 1'b1;
    end else begin
        host_dram_write_req_data_delayed_V_last1_update = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_154 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_done = 1'b0;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_read_resp_0_2_reg_369 = 'bx;

assign ap_phi_reg_pp0_iter0_read_resp_1_2_reg_357 = 'bx;

assign ap_phi_reg_pp0_iter0_tmp_data_V_2_reg_325 = 'bx;

assign ap_phi_reg_pp0_iter0_tmp_data_V_reg_258 = 'bx;

assign ap_phi_reg_pp0_iter0_tmp_last_2_reg_336 = 'bx;

assign ap_phi_reg_pp0_iter0_tmp_last_reg_269 = 'bx;

assign ap_phi_reg_pp0_iter0_valid_read_resp_1_reg_347 = 'bx;

assign ap_phi_reg_pp0_iter0_valid_read_resp_3_reg_381 = 'bx;

assign ap_phi_reg_pp0_iter0_valid_write_req_data_1_reg_280 = 'bx;

assign ap_phi_reg_pp0_iter0_valid_write_req_data_3_reg_314 = 'bx;

assign ap_phi_reg_pp0_iter0_write_req_data_0_2_reg_302 = 'bx;

assign ap_phi_reg_pp0_iter0_write_req_data_1_2_reg_290 = 'bx;

assign ap_ready = 1'b0;

assign empty_n_1_nbread_fu_162_p3_0 = (host_dram_read_resp_delayed_V_last_empty_n & host_dram_read_resp_delayed_V_data_V_empty_n);

assign empty_n_4_fu_392_p1 = empty_n_nbread_fu_154_p3_0;

assign empty_n_5_fu_404_p1 = empty_n_1_nbread_fu_162_p3_0;

assign empty_n_nbread_fu_154_p3_0 = (host_dram_write_req_data_V_last_empty_n & host_dram_write_req_data_V_data_V_empty_n);

assign full_n_1_nbwrite_fu_180_p5 = (host_dram_read_resp_V_last_full_n & host_dram_read_resp_V_data_V_full_n);

assign full_n_nbwrite_fu_170_p5 = (host_dram_write_req_data_delayed_V_last_full_n & host_dram_write_req_data_delayed_V_data_V_full_n);

assign host_dram_read_resp_V_data_V_din = ap_phi_mux_tmp_data_V_2_phi_fu_328_p4;

assign host_dram_read_resp_V_data_V_write = host_dram_read_resp_V_last1_update;

assign host_dram_read_resp_V_last_din = ap_phi_mux_tmp_last_2_phi_fu_339_p4;

assign host_dram_read_resp_V_last_write = host_dram_read_resp_V_last1_update;

assign host_dram_read_resp_delayed_V_data_V_read = host_dram_read_resp_delayed_V_last0_update;

assign host_dram_read_resp_delayed_V_last_read = host_dram_read_resp_delayed_V_last0_update;

assign host_dram_write_req_data_V_data_V_read = host_dram_write_req_data_V_last0_update;

assign host_dram_write_req_data_V_last_read = host_dram_write_req_data_V_last0_update;

assign host_dram_write_req_data_delayed_V_data_V_din = ap_phi_mux_tmp_data_V_phi_fu_261_p4;

assign host_dram_write_req_data_delayed_V_data_V_write = host_dram_write_req_data_delayed_V_last1_update;

assign host_dram_write_req_data_delayed_V_last_din = ap_phi_mux_tmp_last_phi_fu_272_p4;

assign host_dram_write_req_data_delayed_V_last_write = host_dram_write_req_data_delayed_V_last1_update;

assign not_full_n_i5_fu_429_p2 = (full_n_1_nbwrite_fu_180_p5 ^ 1'd1);

assign not_full_n_i_fu_416_p2 = (full_n_nbwrite_fu_170_p5 ^ 1'd1);

assign p_valid_read_resp_1_fu_435_p2 = (not_full_n_i5_fu_429_p2 & ap_phi_mux_valid_read_resp_1_phi_fu_350_p4);

assign p_valid_write_req_data_1_fu_422_p2 = (not_full_n_i_fu_416_p2 & ap_phi_mux_valid_write_req_data_1_phi_fu_283_p4);

endmodule //host_delayed_channel_forwarder
