// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="host_delayed_channel_forwarder,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.727000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1030,HLS_SYN_LUT=285}" *)

module host_delayed_channel_forwarder (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
ap_continue,
        ap_idle,
        ap_ready,
        host_dram_write_req_data_V_last_dout,
        host_dram_write_req_data_V_last_empty_n,
        host_dram_write_req_data_V_last_read,
        host_dram_write_req_data_V_data_V_dout,
        host_dram_write_req_data_V_data_V_empty_n,
        host_dram_write_req_data_V_data_V_read,
        host_dram_write_req_data_delayed_V_last_din,
        host_dram_write_req_data_delayed_V_last_full_n,
        host_dram_write_req_data_delayed_V_last_write,
        host_dram_write_req_data_delayed_V_data_V_din,
        host_dram_write_req_data_delayed_V_data_V_full_n,
        host_dram_write_req_data_delayed_V_data_V_write,
        host_dram_read_resp_delayed_V_last_dout,
        host_dram_read_resp_delayed_V_last_empty_n,
        host_dram_read_resp_delayed_V_last_read,
        host_dram_read_resp_delayed_V_data_V_dout,
        host_dram_read_resp_delayed_V_data_V_empty_n,
        host_dram_read_resp_delayed_V_data_V_read,
        host_dram_read_resp_V_last_din,
        host_dram_read_resp_V_last_full_n,
        host_dram_read_resp_V_last_write,
        host_dram_read_resp_V_data_V_din,
        host_dram_read_resp_V_data_V_full_n,
        host_dram_read_resp_V_data_V_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output ap_ready; output ap_continue;
input   host_dram_write_req_data_V_last_dout;
input   host_dram_write_req_data_V_last_empty_n;
output   host_dram_write_req_data_V_last_read;
input  [511:0] host_dram_write_req_data_V_data_V_dout;
input   host_dram_write_req_data_V_data_V_empty_n;
output   host_dram_write_req_data_V_data_V_read;
output   host_dram_write_req_data_delayed_V_last_din;
input   host_dram_write_req_data_delayed_V_last_full_n;
output   host_dram_write_req_data_delayed_V_last_write;
output  [511:0] host_dram_write_req_data_delayed_V_data_V_din;
input   host_dram_write_req_data_delayed_V_data_V_full_n;
output   host_dram_write_req_data_delayed_V_data_V_write;
input   host_dram_read_resp_delayed_V_last_dout;
input   host_dram_read_resp_delayed_V_last_empty_n;
output   host_dram_read_resp_delayed_V_last_read;
input  [511:0] host_dram_read_resp_delayed_V_data_V_dout;
input   host_dram_read_resp_delayed_V_data_V_empty_n;
output   host_dram_read_resp_delayed_V_data_V_read;
output   host_dram_read_resp_V_last_din;
input   host_dram_read_resp_V_last_full_n;
output   host_dram_read_resp_V_last_write;
output  [511:0] host_dram_read_resp_V_data_V_din;
input   host_dram_read_resp_V_data_V_full_n;
output   host_dram_read_resp_V_data_V_write;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [511:0] read_resp_1_2_phi_fu_359_p4;
reg   [511:0] read_resp_1_s_reg_190;
wire    ap_CS_fsm_state2;
reg   [0:0] read_resp_0_2_phi_fu_371_p4;
reg   [0:0] read_resp_0_s_reg_201;
reg   [511:0] write_req_data_1_2_phi_fu_292_p4;
reg   [511:0] write_req_data_1_s_reg_212;
reg   [0:0] write_req_data_0_2_phi_fu_304_p4;
reg   [0:0] write_req_data_0_s_reg_223;
wire   [0:0] valid_write_req_data_phi_fu_238_p4;
reg   [0:0] valid_write_req_data_reg_234;
reg   [0:0] valid_write_req_data_3_phi_fu_316_p4;
wire   [0:0] valid_read_resp_phi_fu_249_p4;
reg   [0:0] valid_read_resp_reg_245;
reg   [0:0] valid_read_resp_3_phi_fu_383_p4;
reg   [511:0] tmp_data_V_phi_fu_259_p4;
wire   [0:0] empty_n_4_fu_390_p1;
reg   [0:0] tmp_last_phi_fu_270_p4;
reg   [0:0] valid_write_req_data_1_phi_fu_281_p4;
wire   [0:0] p_valid_write_req_data_1_fu_414_p2;
reg   [511:0] tmp_data_V_2_phi_fu_326_p4;
wire   [0:0] empty_n_5_fu_421_p1;
reg   [0:0] tmp_last_2_phi_fu_337_p4;
reg   [0:0] valid_read_resp_1_phi_fu_348_p4;
wire   [0:0] p_valid_read_resp_1_fu_445_p2;
reg    host_dram_write_req_data_V_last0_update;
wire   [0:0] empty_n_nbread_fu_154_p3_0;
reg    host_dram_write_req_data_delayed_V_last1_update;
wire   [0:0] full_n_nbwrite_fu_162_p5;
reg    host_dram_read_resp_delayed_V_last0_update;
wire   [0:0] empty_n_1_nbread_fu_172_p3_0;
reg    host_dram_read_resp_V_last1_update;
wire   [0:0] full_n_1_nbwrite_fu_180_p5;
wire   [0:0] not_full_n_i_fu_408_p2;
wire   [0:0] not_full_n_i5_fu_439_p2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        valid_read_resp_reg_245 <= valid_read_resp_3_phi_fu_383_p4;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        valid_read_resp_reg_245 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        valid_write_req_data_reg_234 <= valid_write_req_data_3_phi_fu_316_p4;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        valid_write_req_data_reg_234 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        read_resp_0_s_reg_201 <= read_resp_0_2_phi_fu_371_p4;
        read_resp_1_s_reg_190 <= read_resp_1_2_phi_fu_359_p4;
        write_req_data_0_s_reg_223 <= write_req_data_0_2_phi_fu_304_p4;
        write_req_data_1_s_reg_212 <= write_req_data_1_2_phi_fu_292_p4;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((valid_read_resp_phi_fu_249_p4 == 1'd1) | (1'd1 == empty_n_5_fu_421_p1)) & (1'b1 == (host_dram_read_resp_V_last_full_n & host_dram_read_resp_V_data_V_full_n)))) begin
        host_dram_read_resp_V_last1_update = 1'b1;
    end else begin
        host_dram_read_resp_V_last1_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == valid_read_resp_phi_fu_249_p4) & (1'b1 == (host_dram_read_resp_delayed_V_last_empty_n & host_dram_read_resp_delayed_V_data_V_empty_n)))) begin
        host_dram_read_resp_delayed_V_last0_update = 1'b1;
    end else begin
        host_dram_read_resp_delayed_V_last0_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == valid_write_req_data_phi_fu_238_p4) & (1'b1 == (host_dram_write_req_data_V_last_empty_n & host_dram_write_req_data_V_data_V_empty_n)))) begin
        host_dram_write_req_data_V_last0_update = 1'b1;
    end else begin
        host_dram_write_req_data_V_last0_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((valid_write_req_data_phi_fu_238_p4 == 1'd1) | (1'd1 == empty_n_4_fu_390_p1)) & (1'b1 == (host_dram_write_req_data_delayed_V_last_full_n & host_dram_write_req_data_delayed_V_data_V_full_n)))) begin
        host_dram_write_req_data_delayed_V_last1_update = 1'b1;
    end else begin
        host_dram_write_req_data_delayed_V_last1_update = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd0 == valid_read_resp_phi_fu_249_p4) & (1'd0 == empty_n_5_fu_421_p1))) begin
            read_resp_0_2_phi_fu_371_p4 = host_dram_read_resp_delayed_V_last_dout;
        end else if (((valid_read_resp_phi_fu_249_p4 == 1'd1) | (1'd1 == empty_n_5_fu_421_p1))) begin
            read_resp_0_2_phi_fu_371_p4 = tmp_last_2_phi_fu_337_p4;
        end else begin
            read_resp_0_2_phi_fu_371_p4 = 'bx;
        end
    end else begin
        read_resp_0_2_phi_fu_371_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd0 == valid_read_resp_phi_fu_249_p4) & (1'd0 == empty_n_5_fu_421_p1))) begin
            read_resp_1_2_phi_fu_359_p4 = host_dram_read_resp_delayed_V_data_V_dout;
        end else if (((valid_read_resp_phi_fu_249_p4 == 1'd1) | (1'd1 == empty_n_5_fu_421_p1))) begin
            read_resp_1_2_phi_fu_359_p4 = tmp_data_V_2_phi_fu_326_p4;
        end else begin
            read_resp_1_2_phi_fu_359_p4 = 'bx;
        end
    end else begin
        read_resp_1_2_phi_fu_359_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd1 == empty_n_5_fu_421_p1) & (1'd0 == valid_read_resp_phi_fu_249_p4))) begin
            tmp_data_V_2_phi_fu_326_p4 = host_dram_read_resp_delayed_V_data_V_dout;
        end else if ((valid_read_resp_phi_fu_249_p4 == 1'd1)) begin
            tmp_data_V_2_phi_fu_326_p4 = read_resp_1_s_reg_190;
        end else begin
            tmp_data_V_2_phi_fu_326_p4 = 'bx;
        end
    end else begin
        tmp_data_V_2_phi_fu_326_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd1 == empty_n_4_fu_390_p1) & (1'd0 == valid_write_req_data_phi_fu_238_p4))) begin
            tmp_data_V_phi_fu_259_p4 = host_dram_write_req_data_V_data_V_dout;
        end else if ((valid_write_req_data_phi_fu_238_p4 == 1'd1)) begin
            tmp_data_V_phi_fu_259_p4 = write_req_data_1_s_reg_212;
        end else begin
            tmp_data_V_phi_fu_259_p4 = 'bx;
        end
    end else begin
        tmp_data_V_phi_fu_259_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd1 == empty_n_5_fu_421_p1) & (1'd0 == valid_read_resp_phi_fu_249_p4))) begin
            tmp_last_2_phi_fu_337_p4 = host_dram_read_resp_delayed_V_last_dout;
        end else if ((valid_read_resp_phi_fu_249_p4 == 1'd1)) begin
            tmp_last_2_phi_fu_337_p4 = read_resp_0_s_reg_201;
        end else begin
            tmp_last_2_phi_fu_337_p4 = 'bx;
        end
    end else begin
        tmp_last_2_phi_fu_337_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd1 == empty_n_4_fu_390_p1) & (1'd0 == valid_write_req_data_phi_fu_238_p4))) begin
            tmp_last_phi_fu_270_p4 = host_dram_write_req_data_V_last_dout;
        end else if ((valid_write_req_data_phi_fu_238_p4 == 1'd1)) begin
            tmp_last_phi_fu_270_p4 = write_req_data_0_s_reg_223;
        end else begin
            tmp_last_phi_fu_270_p4 = 'bx;
        end
    end else begin
        tmp_last_phi_fu_270_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd1 == empty_n_5_fu_421_p1) & (1'd0 == valid_read_resp_phi_fu_249_p4))) begin
            valid_read_resp_1_phi_fu_348_p4 = empty_n_1_nbread_fu_172_p3_0;
        end else if ((valid_read_resp_phi_fu_249_p4 == 1'd1)) begin
            valid_read_resp_1_phi_fu_348_p4 = valid_read_resp_reg_245;
        end else begin
            valid_read_resp_1_phi_fu_348_p4 = 'bx;
        end
    end else begin
        valid_read_resp_1_phi_fu_348_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd0 == valid_read_resp_phi_fu_249_p4) & (1'd0 == empty_n_5_fu_421_p1))) begin
            valid_read_resp_3_phi_fu_383_p4 = empty_n_1_nbread_fu_172_p3_0;
        end else if (((valid_read_resp_phi_fu_249_p4 == 1'd1) | (1'd1 == empty_n_5_fu_421_p1))) begin
            valid_read_resp_3_phi_fu_383_p4 = p_valid_read_resp_1_fu_445_p2;
        end else begin
            valid_read_resp_3_phi_fu_383_p4 = 'bx;
        end
    end else begin
        valid_read_resp_3_phi_fu_383_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd1 == empty_n_4_fu_390_p1) & (1'd0 == valid_write_req_data_phi_fu_238_p4))) begin
            valid_write_req_data_1_phi_fu_281_p4 = empty_n_nbread_fu_154_p3_0;
        end else if ((valid_write_req_data_phi_fu_238_p4 == 1'd1)) begin
            valid_write_req_data_1_phi_fu_281_p4 = valid_write_req_data_reg_234;
        end else begin
            valid_write_req_data_1_phi_fu_281_p4 = 'bx;
        end
    end else begin
        valid_write_req_data_1_phi_fu_281_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd0 == valid_write_req_data_phi_fu_238_p4) & (1'd0 == empty_n_4_fu_390_p1))) begin
            valid_write_req_data_3_phi_fu_316_p4 = empty_n_nbread_fu_154_p3_0;
        end else if (((valid_write_req_data_phi_fu_238_p4 == 1'd1) | (1'd1 == empty_n_4_fu_390_p1))) begin
            valid_write_req_data_3_phi_fu_316_p4 = p_valid_write_req_data_1_fu_414_p2;
        end else begin
            valid_write_req_data_3_phi_fu_316_p4 = 'bx;
        end
    end else begin
        valid_write_req_data_3_phi_fu_316_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd0 == valid_write_req_data_phi_fu_238_p4) & (1'd0 == empty_n_4_fu_390_p1))) begin
            write_req_data_0_2_phi_fu_304_p4 = host_dram_write_req_data_V_last_dout;
        end else if (((valid_write_req_data_phi_fu_238_p4 == 1'd1) | (1'd1 == empty_n_4_fu_390_p1))) begin
            write_req_data_0_2_phi_fu_304_p4 = tmp_last_phi_fu_270_p4;
        end else begin
            write_req_data_0_2_phi_fu_304_p4 = 'bx;
        end
    end else begin
        write_req_data_0_2_phi_fu_304_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd0 == valid_write_req_data_phi_fu_238_p4) & (1'd0 == empty_n_4_fu_390_p1))) begin
            write_req_data_1_2_phi_fu_292_p4 = host_dram_write_req_data_V_data_V_dout;
        end else if (((valid_write_req_data_phi_fu_238_p4 == 1'd1) | (1'd1 == empty_n_4_fu_390_p1))) begin
            write_req_data_1_2_phi_fu_292_p4 = tmp_data_V_phi_fu_259_p4;
        end else begin
            write_req_data_1_2_phi_fu_292_p4 = 'bx;
        end
    end else begin
        write_req_data_1_2_phi_fu_292_p4 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_done = 1'b0;

assign ap_ready = 1'b0;

assign empty_n_1_nbread_fu_172_p3_0 = (host_dram_read_resp_delayed_V_last_empty_n & host_dram_read_resp_delayed_V_data_V_empty_n);

assign empty_n_4_fu_390_p1 = empty_n_nbread_fu_154_p3_0;

assign empty_n_5_fu_421_p1 = empty_n_1_nbread_fu_172_p3_0;

assign empty_n_nbread_fu_154_p3_0 = (host_dram_write_req_data_V_last_empty_n & host_dram_write_req_data_V_data_V_empty_n);

assign full_n_1_nbwrite_fu_180_p5 = (host_dram_read_resp_V_last_full_n & host_dram_read_resp_V_data_V_full_n);

assign full_n_nbwrite_fu_162_p5 = (host_dram_write_req_data_delayed_V_last_full_n & host_dram_write_req_data_delayed_V_data_V_full_n);

assign host_dram_read_resp_V_data_V_din = tmp_data_V_2_phi_fu_326_p4;

assign host_dram_read_resp_V_data_V_write = host_dram_read_resp_V_last1_update;

assign host_dram_read_resp_V_last_din = tmp_last_2_phi_fu_337_p4;

assign host_dram_read_resp_V_last_write = host_dram_read_resp_V_last1_update;

assign host_dram_read_resp_delayed_V_data_V_read = host_dram_read_resp_delayed_V_last0_update;

assign host_dram_read_resp_delayed_V_last_read = host_dram_read_resp_delayed_V_last0_update;

assign host_dram_write_req_data_V_data_V_read = host_dram_write_req_data_V_last0_update;

assign host_dram_write_req_data_V_last_read = host_dram_write_req_data_V_last0_update;

assign host_dram_write_req_data_delayed_V_data_V_din = tmp_data_V_phi_fu_259_p4;

assign host_dram_write_req_data_delayed_V_data_V_write = host_dram_write_req_data_delayed_V_last1_update;

assign host_dram_write_req_data_delayed_V_last_din = tmp_last_phi_fu_270_p4;

assign host_dram_write_req_data_delayed_V_last_write = host_dram_write_req_data_delayed_V_last1_update;

assign not_full_n_i5_fu_439_p2 = (full_n_1_nbwrite_fu_180_p5 ^ 1'd1);

assign not_full_n_i_fu_408_p2 = (full_n_nbwrite_fu_162_p5 ^ 1'd1);

assign p_valid_read_resp_1_fu_445_p2 = (valid_read_resp_1_phi_fu_348_p4 & not_full_n_i5_fu_439_p2);

assign p_valid_write_req_data_1_fu_414_p2 = (valid_write_req_data_1_phi_fu_281_p4 & not_full_n_i_fu_408_p2);

assign valid_read_resp_phi_fu_249_p4 = valid_read_resp_reg_245;

assign valid_write_req_data_phi_fu_238_p4 = valid_write_req_data_reg_234;

endmodule //host_delayed_channel_forwarder
