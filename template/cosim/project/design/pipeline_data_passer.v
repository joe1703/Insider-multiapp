// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pipeline_data_passer,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.727000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=779,HLS_SYN_LUT=714}" *)

module pipeline_data_passer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
ap_continue,
        ap_idle,
        ap_ready,
        reqs_pipe0_write_V_sector_off_dout,
        reqs_pipe0_write_V_sector_off_empty_n,
        reqs_pipe0_write_V_sector_off_read,
        reqs_pipe0_write_V_sector_num_dout,
        reqs_pipe0_write_V_sector_num_empty_n,
        reqs_pipe0_write_V_sector_num_read,
        reqs_pipe0_write_V_tag_dout,
        reqs_pipe0_write_V_tag_empty_n,
        reqs_pipe0_write_V_tag_read,
        reqs_pipe0_write_V_rw_dout,
        reqs_pipe0_write_V_rw_empty_n,
        reqs_pipe0_write_V_rw_read,
        reqs_pipe1_read_V_sector_off_din,
        reqs_pipe1_read_V_sector_off_full_n,
        reqs_pipe1_read_V_sector_off_write,
        reqs_pipe1_read_V_sector_num_din,
        reqs_pipe1_read_V_sector_num_full_n,
        reqs_pipe1_read_V_sector_num_write,
        reqs_pipe1_read_V_tag_din,
        reqs_pipe1_read_V_tag_full_n,
        reqs_pipe1_read_V_tag_write,
        reqs_pipe1_read_V_rw_din,
        reqs_pipe1_read_V_rw_full_n,
        reqs_pipe1_read_V_rw_write,
        reqs_pipe1_write_V_sector_off_dout,
        reqs_pipe1_write_V_sector_off_empty_n,
        reqs_pipe1_write_V_sector_off_read,
        reqs_pipe1_write_V_sector_num_dout,
        reqs_pipe1_write_V_sector_num_empty_n,
        reqs_pipe1_write_V_sector_num_read,
        reqs_pipe1_write_V_tag_dout,
        reqs_pipe1_write_V_tag_empty_n,
        reqs_pipe1_write_V_tag_read,
        reqs_pipe1_write_V_rw_dout,
        reqs_pipe1_write_V_rw_empty_n,
        reqs_pipe1_write_V_rw_read,
        reqs_pipe2_read_V_sector_off_din,
        reqs_pipe2_read_V_sector_off_full_n,
        reqs_pipe2_read_V_sector_off_write,
        reqs_pipe2_read_V_sector_num_din,
        reqs_pipe2_read_V_sector_num_full_n,
        reqs_pipe2_read_V_sector_num_write,
        reqs_pipe2_read_V_tag_din,
        reqs_pipe2_read_V_tag_full_n,
        reqs_pipe2_read_V_tag_write,
        reqs_pipe2_read_V_rw_din,
        reqs_pipe2_read_V_rw_full_n,
        reqs_pipe2_read_V_rw_write,
        data_pipe1_write_V_last_dout,
        data_pipe1_write_V_last_empty_n,
        data_pipe1_write_V_last_read,
        data_pipe1_write_V_data_V_dout,
        data_pipe1_write_V_data_V_empty_n,
        data_pipe1_write_V_data_V_read,
        data_pipe2_read_V_last_din,
        data_pipe2_read_V_last_full_n,
        data_pipe2_read_V_last_write,
        data_pipe2_read_V_data_V_din,
        data_pipe2_read_V_data_V_full_n,
        data_pipe2_read_V_data_V_write,
        data_valid_pipe1_write_V_dout,
        data_valid_pipe1_write_V_empty_n,
        data_valid_pipe1_write_V_read,
        data_valid_pipe2_read_V_din,
        data_valid_pipe2_read_V_full_n,
        data_valid_pipe2_read_V_write,
        kbuf_addr_pipe0_write_V_dout,
        kbuf_addr_pipe0_write_V_empty_n,
        kbuf_addr_pipe0_write_V_read,
        kbuf_addr_pipe2_read_V_din,
        kbuf_addr_pipe2_read_V_full_n,
        kbuf_addr_pipe2_read_V_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output ap_ready; output ap_continue;
input  [31:0] reqs_pipe0_write_V_sector_off_dout;
input   reqs_pipe0_write_V_sector_off_empty_n;
output   reqs_pipe0_write_V_sector_off_read;
input  [31:0] reqs_pipe0_write_V_sector_num_dout;
input   reqs_pipe0_write_V_sector_num_empty_n;
output   reqs_pipe0_write_V_sector_num_read;
input  [31:0] reqs_pipe0_write_V_tag_dout;
input   reqs_pipe0_write_V_tag_empty_n;
output   reqs_pipe0_write_V_tag_read;
input   reqs_pipe0_write_V_rw_dout;
input   reqs_pipe0_write_V_rw_empty_n;
output   reqs_pipe0_write_V_rw_read;
output  [31:0] reqs_pipe1_read_V_sector_off_din;
input   reqs_pipe1_read_V_sector_off_full_n;
output   reqs_pipe1_read_V_sector_off_write;
output  [31:0] reqs_pipe1_read_V_sector_num_din;
input   reqs_pipe1_read_V_sector_num_full_n;
output   reqs_pipe1_read_V_sector_num_write;
output  [31:0] reqs_pipe1_read_V_tag_din;
input   reqs_pipe1_read_V_tag_full_n;
output   reqs_pipe1_read_V_tag_write;
output   reqs_pipe1_read_V_rw_din;
input   reqs_pipe1_read_V_rw_full_n;
output   reqs_pipe1_read_V_rw_write;
input  [31:0] reqs_pipe1_write_V_sector_off_dout;
input   reqs_pipe1_write_V_sector_off_empty_n;
output   reqs_pipe1_write_V_sector_off_read;
input  [31:0] reqs_pipe1_write_V_sector_num_dout;
input   reqs_pipe1_write_V_sector_num_empty_n;
output   reqs_pipe1_write_V_sector_num_read;
input  [31:0] reqs_pipe1_write_V_tag_dout;
input   reqs_pipe1_write_V_tag_empty_n;
output   reqs_pipe1_write_V_tag_read;
input   reqs_pipe1_write_V_rw_dout;
input   reqs_pipe1_write_V_rw_empty_n;
output   reqs_pipe1_write_V_rw_read;
output  [31:0] reqs_pipe2_read_V_sector_off_din;
input   reqs_pipe2_read_V_sector_off_full_n;
output   reqs_pipe2_read_V_sector_off_write;
output  [31:0] reqs_pipe2_read_V_sector_num_din;
input   reqs_pipe2_read_V_sector_num_full_n;
output   reqs_pipe2_read_V_sector_num_write;
output  [31:0] reqs_pipe2_read_V_tag_din;
input   reqs_pipe2_read_V_tag_full_n;
output   reqs_pipe2_read_V_tag_write;
output   reqs_pipe2_read_V_rw_din;
input   reqs_pipe2_read_V_rw_full_n;
output   reqs_pipe2_read_V_rw_write;
input   data_pipe1_write_V_last_dout;
input   data_pipe1_write_V_last_empty_n;
output   data_pipe1_write_V_last_read;
input  [511:0] data_pipe1_write_V_data_V_dout;
input   data_pipe1_write_V_data_V_empty_n;
output   data_pipe1_write_V_data_V_read;
output   data_pipe2_read_V_last_din;
input   data_pipe2_read_V_last_full_n;
output   data_pipe2_read_V_last_write;
output  [511:0] data_pipe2_read_V_data_V_din;
input   data_pipe2_read_V_data_V_full_n;
output   data_pipe2_read_V_data_V_write;
input   data_valid_pipe1_write_V_dout;
input   data_valid_pipe1_write_V_empty_n;
output   data_valid_pipe1_write_V_read;
output   data_valid_pipe2_read_V_din;
input   data_valid_pipe2_read_V_full_n;
output   data_valid_pipe2_read_V_write;
input  [63:0] kbuf_addr_pipe0_write_V_dout;
input   kbuf_addr_pipe0_write_V_empty_n;
output   kbuf_addr_pipe0_write_V_read;
output  [63:0] kbuf_addr_pipe2_read_V_din;
input   kbuf_addr_pipe2_read_V_full_n;
output   kbuf_addr_pipe2_read_V_write;

reg ap_idle;
reg data_valid_pipe1_write_V_read;
reg data_valid_pipe2_read_V_write;
reg kbuf_addr_pipe0_write_V_read;
reg kbuf_addr_pipe2_read_V_write;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [511:0] data_data_1_2_phi_fu_943_p4;
reg   [511:0] data_data_1_s_reg_494;
wire    ap_CS_fsm_state2;
reg   [0:0] data_data_0_2_phi_fu_955_p4;
reg   [0:0] data_data_0_s_reg_505;
reg   [0:0] p_022_3_2_phi_fu_852_p4;
reg   [0:0] p_022_3_s_reg_516;
reg   [31:0] p_022_2_2_phi_fu_864_p4;
reg   [31:0] p_022_2_s_reg_527;
reg   [31:0] p_022_1_2_phi_fu_876_p4;
reg   [31:0] p_022_1_s_reg_538;
reg   [31:0] p_022_0_2_phi_fu_888_p4;
reg   [31:0] p_022_0_s_reg_549;
reg   [0:0] p_0_3_2_phi_fu_739_p4;
reg   [0:0] p_0_3_s_reg_560;
reg   [31:0] p_0_2_2_phi_fu_751_p4;
reg   [31:0] p_0_2_s_reg_571;
reg   [31:0] p_0_1_2_phi_fu_763_p4;
reg   [31:0] p_0_1_s_reg_582;
reg   [31:0] p_0_0_2_phi_fu_775_p4;
reg   [31:0] p_0_0_s_reg_593;
reg   [63:0] p_020_2_phi_fu_1043_p4;
reg   [63:0] p_020_s_reg_604;
reg   [0:0] p_026_2_phi_fu_999_p4;
reg   [0:0] p_026_s_reg_615;
wire   [0:0] valid_req0_phi_fu_630_p4;
reg   [0:0] valid_req0_reg_626;
reg   [0:0] valid_req0_3_phi_fu_787_p4;
wire   [0:0] valid_req1_phi_fu_641_p4;
reg   [0:0] valid_req1_reg_637;
reg   [0:0] valid_req1_3_phi_fu_900_p4;
wire   [0:0] valid_data_phi_fu_652_p4;
reg   [0:0] valid_data_reg_648;
reg   [0:0] valid_data_3_phi_fu_967_p4;
wire   [0:0] valid_valid_phi_fu_663_p4;
reg   [0:0] valid_valid_reg_659;
reg   [0:0] valid_valid_3_phi_fu_1011_p4;
wire   [0:0] vali_phi_fu_674_p4;
reg   [0:0] vali_reg_670;
reg   [0:0] vali_3_phi_fu_1055_p4;
reg   [0:0] tmp_rw_phi_fu_684_p4;
wire   [0:0] empty_n_10_fu_1062_p1;
reg   [31:0] tmp_tag_phi_fu_695_p4;
reg   [31:0] tmp_sector_num_phi_fu_706_p4;
reg   [31:0] tmp_sector_off_phi_fu_717_p4;
reg   [0:0] valid_req0_1_phi_fu_728_p4;
wire   [0:0] p_valid_req0_1_fu_1098_p2;
reg   [0:0] tmp_rw_2_phi_fu_797_p4;
wire   [0:0] empty_n_11_fu_1105_p1;
reg   [31:0] tmp_tag_2_phi_fu_808_p4;
reg   [31:0] tmp_sector_num_2_phi_fu_819_p4;
reg   [31:0] tmp_sector_off_2_phi_fu_830_p4;
reg   [0:0] valid_req1_1_phi_fu_841_p4;
wire   [0:0] p_valid_req1_1_fu_1141_p2;
reg   [511:0] tmp_data_V_phi_fu_910_p4;
wire   [0:0] empty_n_12_fu_1148_p1;
reg   [0:0] tmp_last_phi_fu_921_p4;
reg   [0:0] valid_data_1_phi_fu_932_p4;
wire   [0:0] p_valid_data_1_fu_1172_p2;
reg   [0:0] tmp_phi_fu_977_p4;
wire   [0:0] empty_n_13_fu_1179_p1;
reg   [0:0] valid_valid_1_phi_fu_988_p4;
wire   [0:0] p_valid_valid_1_fu_1197_p2;
reg   [63:0] tmp_2_phi_fu_1021_p4;
wire   [0:0] empty_n_14_fu_1204_p1;
reg   [0:0] vali_1_phi_fu_1032_p4;
wire   [0:0] p_vali_1_fu_1222_p2;
reg    reqs_pipe0_write_V_rw0_update;
reg    ap_condition_309;
wire   [0:0] empty_n_nbread_fu_394_p5_0;
reg    reqs_pipe1_read_V_rw1_update;
reg    ap_condition_321;
wire   [0:0] full_n_nbwrite_fu_406_p9;
reg    reqs_pipe1_write_V_rw0_update;
reg    ap_condition_329;
wire   [0:0] empty_n_1_nbread_fu_422_p5_0;
reg    reqs_pipe2_read_V_rw1_update;
reg    ap_condition_341;
wire   [0:0] full_n_1_nbwrite_fu_434_p9;
reg    data_pipe1_write_V_last0_update;
wire   [0:0] empty_n_2_nbread_fu_450_p3_0;
reg    data_pipe2_read_V_last1_update;
wire   [0:0] full_n_2_nbwrite_fu_458_p5;
wire   [0:0] not_full_n_i_fu_1092_p2;
wire   [0:0] not_full_n_i5_fu_1135_p2;
wire   [0:0] not_full_n_i9_fu_1166_p2;
wire   [0:0] not_full_n_i1_fu_1191_p0;
wire   [0:0] not_full_n_i1_fu_1191_p2;
wire   [0:0] not_full_n_i2_fu_1216_p0;
wire   [0:0] not_full_n_i2_fu_1216_p2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        vali_reg_670 <= vali_3_phi_fu_1055_p4;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        vali_reg_670 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        valid_data_reg_648 <= valid_data_3_phi_fu_967_p4;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        valid_data_reg_648 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        valid_req0_reg_626 <= valid_req0_3_phi_fu_787_p4;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        valid_req0_reg_626 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        valid_req1_reg_637 <= valid_req1_3_phi_fu_900_p4;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        valid_req1_reg_637 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        valid_valid_reg_659 <= valid_valid_3_phi_fu_1011_p4;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        valid_valid_reg_659 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_data_0_s_reg_505 <= data_data_0_2_phi_fu_955_p4;
        data_data_1_s_reg_494 <= data_data_1_2_phi_fu_943_p4;
        p_020_s_reg_604 <= p_020_2_phi_fu_1043_p4;
        p_022_0_s_reg_549 <= p_022_0_2_phi_fu_888_p4;
        p_022_1_s_reg_538 <= p_022_1_2_phi_fu_876_p4;
        p_022_2_s_reg_527 <= p_022_2_2_phi_fu_864_p4;
        p_022_3_s_reg_516 <= p_022_3_2_phi_fu_852_p4;
        p_026_s_reg_615 <= p_026_2_phi_fu_999_p4;
        p_0_0_s_reg_593 <= p_0_0_2_phi_fu_775_p4;
        p_0_1_s_reg_582 <= p_0_1_2_phi_fu_763_p4;
        p_0_2_s_reg_571 <= p_0_2_2_phi_fu_751_p4;
        p_0_3_s_reg_560 <= p_0_3_2_phi_fu_739_p4;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd0 == valid_data_phi_fu_652_p4) & (1'd0 == empty_n_12_fu_1148_p1))) begin
            data_data_0_2_phi_fu_955_p4 = data_pipe1_write_V_last_dout;
        end else if (((valid_data_phi_fu_652_p4 == 1'd1) | (1'd1 == empty_n_12_fu_1148_p1))) begin
            data_data_0_2_phi_fu_955_p4 = tmp_last_phi_fu_921_p4;
        end else begin
            data_data_0_2_phi_fu_955_p4 = 'bx;
        end
    end else begin
        data_data_0_2_phi_fu_955_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd0 == valid_data_phi_fu_652_p4) & (1'd0 == empty_n_12_fu_1148_p1))) begin
            data_data_1_2_phi_fu_943_p4 = data_pipe1_write_V_data_V_dout;
        end else if (((valid_data_phi_fu_652_p4 == 1'd1) | (1'd1 == empty_n_12_fu_1148_p1))) begin
            data_data_1_2_phi_fu_943_p4 = tmp_data_V_phi_fu_910_p4;
        end else begin
            data_data_1_2_phi_fu_943_p4 = 'bx;
        end
    end else begin
        data_data_1_2_phi_fu_943_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == valid_data_phi_fu_652_p4) & (1'b1 == (data_pipe1_write_V_last_empty_n & data_pipe1_write_V_data_V_empty_n)))) begin
        data_pipe1_write_V_last0_update = 1'b1;
    end else begin
        data_pipe1_write_V_last0_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((valid_data_phi_fu_652_p4 == 1'd1) | (1'd1 == empty_n_12_fu_1148_p1)) & (1'b1 == (data_pipe2_read_V_last_full_n & data_pipe2_read_V_data_V_full_n)))) begin
        data_pipe2_read_V_last1_update = 1'b1;
    end else begin
        data_pipe2_read_V_last1_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == valid_valid_phi_fu_663_p4) & (1'b1 == data_valid_pipe1_write_V_empty_n))) begin
        data_valid_pipe1_write_V_read = 1'b1;
    end else begin
        data_valid_pipe1_write_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((valid_valid_phi_fu_663_p4 == 1'd1) | (1'd1 == empty_n_13_fu_1179_p1)) & (1'b1 == data_valid_pipe2_read_V_full_n))) begin
        data_valid_pipe2_read_V_write = 1'b1;
    end else begin
        data_valid_pipe2_read_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == vali_phi_fu_674_p4) & (1'b1 == kbuf_addr_pipe0_write_V_empty_n))) begin
        kbuf_addr_pipe0_write_V_read = 1'b1;
    end else begin
        kbuf_addr_pipe0_write_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((vali_phi_fu_674_p4 == 1'd1) | (1'd1 == empty_n_14_fu_1204_p1)) & (1'b1 == kbuf_addr_pipe2_read_V_full_n))) begin
        kbuf_addr_pipe2_read_V_write = 1'b1;
    end else begin
        kbuf_addr_pipe2_read_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd0 == vali_phi_fu_674_p4) & (1'd0 == empty_n_14_fu_1204_p1))) begin
            p_020_2_phi_fu_1043_p4 = kbuf_addr_pipe0_write_V_dout;
        end else if (((vali_phi_fu_674_p4 == 1'd1) | (1'd1 == empty_n_14_fu_1204_p1))) begin
            p_020_2_phi_fu_1043_p4 = tmp_2_phi_fu_1021_p4;
        end else begin
            p_020_2_phi_fu_1043_p4 = 'bx;
        end
    end else begin
        p_020_2_phi_fu_1043_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd0 == valid_req1_phi_fu_641_p4) & (1'd0 == empty_n_11_fu_1105_p1))) begin
            p_022_0_2_phi_fu_888_p4 = reqs_pipe1_write_V_sector_off_dout;
        end else if (((valid_req1_phi_fu_641_p4 == 1'd1) | (1'd1 == empty_n_11_fu_1105_p1))) begin
            p_022_0_2_phi_fu_888_p4 = tmp_sector_off_2_phi_fu_830_p4;
        end else begin
            p_022_0_2_phi_fu_888_p4 = 'bx;
        end
    end else begin
        p_022_0_2_phi_fu_888_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd0 == valid_req1_phi_fu_641_p4) & (1'd0 == empty_n_11_fu_1105_p1))) begin
            p_022_1_2_phi_fu_876_p4 = reqs_pipe1_write_V_sector_num_dout;
        end else if (((valid_req1_phi_fu_641_p4 == 1'd1) | (1'd1 == empty_n_11_fu_1105_p1))) begin
            p_022_1_2_phi_fu_876_p4 = tmp_sector_num_2_phi_fu_819_p4;
        end else begin
            p_022_1_2_phi_fu_876_p4 = 'bx;
        end
    end else begin
        p_022_1_2_phi_fu_876_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd0 == valid_req1_phi_fu_641_p4) & (1'd0 == empty_n_11_fu_1105_p1))) begin
            p_022_2_2_phi_fu_864_p4 = reqs_pipe1_write_V_tag_dout;
        end else if (((valid_req1_phi_fu_641_p4 == 1'd1) | (1'd1 == empty_n_11_fu_1105_p1))) begin
            p_022_2_2_phi_fu_864_p4 = tmp_tag_2_phi_fu_808_p4;
        end else begin
            p_022_2_2_phi_fu_864_p4 = 'bx;
        end
    end else begin
        p_022_2_2_phi_fu_864_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd0 == valid_req1_phi_fu_641_p4) & (1'd0 == empty_n_11_fu_1105_p1))) begin
            p_022_3_2_phi_fu_852_p4 = reqs_pipe1_write_V_rw_dout;
        end else if (((valid_req1_phi_fu_641_p4 == 1'd1) | (1'd1 == empty_n_11_fu_1105_p1))) begin
            p_022_3_2_phi_fu_852_p4 = tmp_rw_2_phi_fu_797_p4;
        end else begin
            p_022_3_2_phi_fu_852_p4 = 'bx;
        end
    end else begin
        p_022_3_2_phi_fu_852_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd0 == valid_valid_phi_fu_663_p4) & (1'd0 == empty_n_13_fu_1179_p1))) begin
            p_026_2_phi_fu_999_p4 = data_valid_pipe1_write_V_dout;
        end else if (((valid_valid_phi_fu_663_p4 == 1'd1) | (1'd1 == empty_n_13_fu_1179_p1))) begin
            p_026_2_phi_fu_999_p4 = tmp_phi_fu_977_p4;
        end else begin
            p_026_2_phi_fu_999_p4 = 'bx;
        end
    end else begin
        p_026_2_phi_fu_999_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd0 == valid_req0_phi_fu_630_p4) & (1'd0 == empty_n_10_fu_1062_p1))) begin
            p_0_0_2_phi_fu_775_p4 = reqs_pipe0_write_V_sector_off_dout;
        end else if (((valid_req0_phi_fu_630_p4 == 1'd1) | (1'd1 == empty_n_10_fu_1062_p1))) begin
            p_0_0_2_phi_fu_775_p4 = tmp_sector_off_phi_fu_717_p4;
        end else begin
            p_0_0_2_phi_fu_775_p4 = 'bx;
        end
    end else begin
        p_0_0_2_phi_fu_775_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd0 == valid_req0_phi_fu_630_p4) & (1'd0 == empty_n_10_fu_1062_p1))) begin
            p_0_1_2_phi_fu_763_p4 = reqs_pipe0_write_V_sector_num_dout;
        end else if (((valid_req0_phi_fu_630_p4 == 1'd1) | (1'd1 == empty_n_10_fu_1062_p1))) begin
            p_0_1_2_phi_fu_763_p4 = tmp_sector_num_phi_fu_706_p4;
        end else begin
            p_0_1_2_phi_fu_763_p4 = 'bx;
        end
    end else begin
        p_0_1_2_phi_fu_763_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd0 == valid_req0_phi_fu_630_p4) & (1'd0 == empty_n_10_fu_1062_p1))) begin
            p_0_2_2_phi_fu_751_p4 = reqs_pipe0_write_V_tag_dout;
        end else if (((valid_req0_phi_fu_630_p4 == 1'd1) | (1'd1 == empty_n_10_fu_1062_p1))) begin
            p_0_2_2_phi_fu_751_p4 = tmp_tag_phi_fu_695_p4;
        end else begin
            p_0_2_2_phi_fu_751_p4 = 'bx;
        end
    end else begin
        p_0_2_2_phi_fu_751_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd0 == valid_req0_phi_fu_630_p4) & (1'd0 == empty_n_10_fu_1062_p1))) begin
            p_0_3_2_phi_fu_739_p4 = reqs_pipe0_write_V_rw_dout;
        end else if (((valid_req0_phi_fu_630_p4 == 1'd1) | (1'd1 == empty_n_10_fu_1062_p1))) begin
            p_0_3_2_phi_fu_739_p4 = tmp_rw_phi_fu_684_p4;
        end else begin
            p_0_3_2_phi_fu_739_p4 = 'bx;
        end
    end else begin
        p_0_3_2_phi_fu_739_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == valid_req0_phi_fu_630_p4) & (ap_condition_309 == 1'b1))) begin
        reqs_pipe0_write_V_rw0_update = 1'b1;
    end else begin
        reqs_pipe0_write_V_rw0_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((valid_req0_phi_fu_630_p4 == 1'd1) | (1'd1 == empty_n_10_fu_1062_p1)) & (ap_condition_321 == 1'b1))) begin
        reqs_pipe1_read_V_rw1_update = 1'b1;
    end else begin
        reqs_pipe1_read_V_rw1_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == valid_req1_phi_fu_641_p4) & (ap_condition_329 == 1'b1))) begin
        reqs_pipe1_write_V_rw0_update = 1'b1;
    end else begin
        reqs_pipe1_write_V_rw0_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((valid_req1_phi_fu_641_p4 == 1'd1) | (1'd1 == empty_n_11_fu_1105_p1)) & (ap_condition_341 == 1'b1))) begin
        reqs_pipe2_read_V_rw1_update = 1'b1;
    end else begin
        reqs_pipe2_read_V_rw1_update = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd1 == empty_n_14_fu_1204_p1) & (1'd0 == vali_phi_fu_674_p4))) begin
            tmp_2_phi_fu_1021_p4 = kbuf_addr_pipe0_write_V_dout;
        end else if ((vali_phi_fu_674_p4 == 1'd1)) begin
            tmp_2_phi_fu_1021_p4 = p_020_s_reg_604;
        end else begin
            tmp_2_phi_fu_1021_p4 = 'bx;
        end
    end else begin
        tmp_2_phi_fu_1021_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd1 == empty_n_12_fu_1148_p1) & (1'd0 == valid_data_phi_fu_652_p4))) begin
            tmp_data_V_phi_fu_910_p4 = data_pipe1_write_V_data_V_dout;
        end else if ((valid_data_phi_fu_652_p4 == 1'd1)) begin
            tmp_data_V_phi_fu_910_p4 = data_data_1_s_reg_494;
        end else begin
            tmp_data_V_phi_fu_910_p4 = 'bx;
        end
    end else begin
        tmp_data_V_phi_fu_910_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd1 == empty_n_12_fu_1148_p1) & (1'd0 == valid_data_phi_fu_652_p4))) begin
            tmp_last_phi_fu_921_p4 = data_pipe1_write_V_last_dout;
        end else if ((valid_data_phi_fu_652_p4 == 1'd1)) begin
            tmp_last_phi_fu_921_p4 = data_data_0_s_reg_505;
        end else begin
            tmp_last_phi_fu_921_p4 = 'bx;
        end
    end else begin
        tmp_last_phi_fu_921_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd1 == empty_n_13_fu_1179_p1) & (1'd0 == valid_valid_phi_fu_663_p4))) begin
            tmp_phi_fu_977_p4 = data_valid_pipe1_write_V_dout;
        end else if ((valid_valid_phi_fu_663_p4 == 1'd1)) begin
            tmp_phi_fu_977_p4 = p_026_s_reg_615;
        end else begin
            tmp_phi_fu_977_p4 = 'bx;
        end
    end else begin
        tmp_phi_fu_977_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd1 == empty_n_11_fu_1105_p1) & (1'd0 == valid_req1_phi_fu_641_p4))) begin
            tmp_rw_2_phi_fu_797_p4 = reqs_pipe1_write_V_rw_dout;
        end else if ((valid_req1_phi_fu_641_p4 == 1'd1)) begin
            tmp_rw_2_phi_fu_797_p4 = p_022_3_s_reg_516;
        end else begin
            tmp_rw_2_phi_fu_797_p4 = 'bx;
        end
    end else begin
        tmp_rw_2_phi_fu_797_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd1 == empty_n_10_fu_1062_p1) & (1'd0 == valid_req0_phi_fu_630_p4))) begin
            tmp_rw_phi_fu_684_p4 = reqs_pipe0_write_V_rw_dout;
        end else if ((valid_req0_phi_fu_630_p4 == 1'd1)) begin
            tmp_rw_phi_fu_684_p4 = p_0_3_s_reg_560;
        end else begin
            tmp_rw_phi_fu_684_p4 = 'bx;
        end
    end else begin
        tmp_rw_phi_fu_684_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd1 == empty_n_11_fu_1105_p1) & (1'd0 == valid_req1_phi_fu_641_p4))) begin
            tmp_sector_num_2_phi_fu_819_p4 = reqs_pipe1_write_V_sector_num_dout;
        end else if ((valid_req1_phi_fu_641_p4 == 1'd1)) begin
            tmp_sector_num_2_phi_fu_819_p4 = p_022_1_s_reg_538;
        end else begin
            tmp_sector_num_2_phi_fu_819_p4 = 'bx;
        end
    end else begin
        tmp_sector_num_2_phi_fu_819_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd1 == empty_n_10_fu_1062_p1) & (1'd0 == valid_req0_phi_fu_630_p4))) begin
            tmp_sector_num_phi_fu_706_p4 = reqs_pipe0_write_V_sector_num_dout;
        end else if ((valid_req0_phi_fu_630_p4 == 1'd1)) begin
            tmp_sector_num_phi_fu_706_p4 = p_0_1_s_reg_582;
        end else begin
            tmp_sector_num_phi_fu_706_p4 = 'bx;
        end
    end else begin
        tmp_sector_num_phi_fu_706_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd1 == empty_n_11_fu_1105_p1) & (1'd0 == valid_req1_phi_fu_641_p4))) begin
            tmp_sector_off_2_phi_fu_830_p4 = reqs_pipe1_write_V_sector_off_dout;
        end else if ((valid_req1_phi_fu_641_p4 == 1'd1)) begin
            tmp_sector_off_2_phi_fu_830_p4 = p_022_0_s_reg_549;
        end else begin
            tmp_sector_off_2_phi_fu_830_p4 = 'bx;
        end
    end else begin
        tmp_sector_off_2_phi_fu_830_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd1 == empty_n_10_fu_1062_p1) & (1'd0 == valid_req0_phi_fu_630_p4))) begin
            tmp_sector_off_phi_fu_717_p4 = reqs_pipe0_write_V_sector_off_dout;
        end else if ((valid_req0_phi_fu_630_p4 == 1'd1)) begin
            tmp_sector_off_phi_fu_717_p4 = p_0_0_s_reg_593;
        end else begin
            tmp_sector_off_phi_fu_717_p4 = 'bx;
        end
    end else begin
        tmp_sector_off_phi_fu_717_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd1 == empty_n_11_fu_1105_p1) & (1'd0 == valid_req1_phi_fu_641_p4))) begin
            tmp_tag_2_phi_fu_808_p4 = reqs_pipe1_write_V_tag_dout;
        end else if ((valid_req1_phi_fu_641_p4 == 1'd1)) begin
            tmp_tag_2_phi_fu_808_p4 = p_022_2_s_reg_527;
        end else begin
            tmp_tag_2_phi_fu_808_p4 = 'bx;
        end
    end else begin
        tmp_tag_2_phi_fu_808_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd1 == empty_n_10_fu_1062_p1) & (1'd0 == valid_req0_phi_fu_630_p4))) begin
            tmp_tag_phi_fu_695_p4 = reqs_pipe0_write_V_tag_dout;
        end else if ((valid_req0_phi_fu_630_p4 == 1'd1)) begin
            tmp_tag_phi_fu_695_p4 = p_0_2_s_reg_571;
        end else begin
            tmp_tag_phi_fu_695_p4 = 'bx;
        end
    end else begin
        tmp_tag_phi_fu_695_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd1 == empty_n_14_fu_1204_p1) & (1'd0 == vali_phi_fu_674_p4))) begin
            vali_1_phi_fu_1032_p4 = kbuf_addr_pipe0_write_V_empty_n;
        end else if ((vali_phi_fu_674_p4 == 1'd1)) begin
            vali_1_phi_fu_1032_p4 = vali_reg_670;
        end else begin
            vali_1_phi_fu_1032_p4 = 'bx;
        end
    end else begin
        vali_1_phi_fu_1032_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd0 == vali_phi_fu_674_p4) & (1'd0 == empty_n_14_fu_1204_p1))) begin
            vali_3_phi_fu_1055_p4 = kbuf_addr_pipe0_write_V_empty_n;
        end else if (((vali_phi_fu_674_p4 == 1'd1) | (1'd1 == empty_n_14_fu_1204_p1))) begin
            vali_3_phi_fu_1055_p4 = p_vali_1_fu_1222_p2;
        end else begin
            vali_3_phi_fu_1055_p4 = 'bx;
        end
    end else begin
        vali_3_phi_fu_1055_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd1 == empty_n_12_fu_1148_p1) & (1'd0 == valid_data_phi_fu_652_p4))) begin
            valid_data_1_phi_fu_932_p4 = empty_n_2_nbread_fu_450_p3_0;
        end else if ((valid_data_phi_fu_652_p4 == 1'd1)) begin
            valid_data_1_phi_fu_932_p4 = valid_data_reg_648;
        end else begin
            valid_data_1_phi_fu_932_p4 = 'bx;
        end
    end else begin
        valid_data_1_phi_fu_932_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd0 == valid_data_phi_fu_652_p4) & (1'd0 == empty_n_12_fu_1148_p1))) begin
            valid_data_3_phi_fu_967_p4 = empty_n_2_nbread_fu_450_p3_0;
        end else if (((valid_data_phi_fu_652_p4 == 1'd1) | (1'd1 == empty_n_12_fu_1148_p1))) begin
            valid_data_3_phi_fu_967_p4 = p_valid_data_1_fu_1172_p2;
        end else begin
            valid_data_3_phi_fu_967_p4 = 'bx;
        end
    end else begin
        valid_data_3_phi_fu_967_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd1 == empty_n_10_fu_1062_p1) & (1'd0 == valid_req0_phi_fu_630_p4))) begin
            valid_req0_1_phi_fu_728_p4 = empty_n_nbread_fu_394_p5_0;
        end else if ((valid_req0_phi_fu_630_p4 == 1'd1)) begin
            valid_req0_1_phi_fu_728_p4 = valid_req0_reg_626;
        end else begin
            valid_req0_1_phi_fu_728_p4 = 'bx;
        end
    end else begin
        valid_req0_1_phi_fu_728_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd0 == valid_req0_phi_fu_630_p4) & (1'd0 == empty_n_10_fu_1062_p1))) begin
            valid_req0_3_phi_fu_787_p4 = empty_n_nbread_fu_394_p5_0;
        end else if (((valid_req0_phi_fu_630_p4 == 1'd1) | (1'd1 == empty_n_10_fu_1062_p1))) begin
            valid_req0_3_phi_fu_787_p4 = p_valid_req0_1_fu_1098_p2;
        end else begin
            valid_req0_3_phi_fu_787_p4 = 'bx;
        end
    end else begin
        valid_req0_3_phi_fu_787_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd1 == empty_n_11_fu_1105_p1) & (1'd0 == valid_req1_phi_fu_641_p4))) begin
            valid_req1_1_phi_fu_841_p4 = empty_n_1_nbread_fu_422_p5_0;
        end else if ((valid_req1_phi_fu_641_p4 == 1'd1)) begin
            valid_req1_1_phi_fu_841_p4 = valid_req1_reg_637;
        end else begin
            valid_req1_1_phi_fu_841_p4 = 'bx;
        end
    end else begin
        valid_req1_1_phi_fu_841_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd0 == valid_req1_phi_fu_641_p4) & (1'd0 == empty_n_11_fu_1105_p1))) begin
            valid_req1_3_phi_fu_900_p4 = empty_n_1_nbread_fu_422_p5_0;
        end else if (((valid_req1_phi_fu_641_p4 == 1'd1) | (1'd1 == empty_n_11_fu_1105_p1))) begin
            valid_req1_3_phi_fu_900_p4 = p_valid_req1_1_fu_1141_p2;
        end else begin
            valid_req1_3_phi_fu_900_p4 = 'bx;
        end
    end else begin
        valid_req1_3_phi_fu_900_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd1 == empty_n_13_fu_1179_p1) & (1'd0 == valid_valid_phi_fu_663_p4))) begin
            valid_valid_1_phi_fu_988_p4 = data_valid_pipe1_write_V_empty_n;
        end else if ((valid_valid_phi_fu_663_p4 == 1'd1)) begin
            valid_valid_1_phi_fu_988_p4 = valid_valid_reg_659;
        end else begin
            valid_valid_1_phi_fu_988_p4 = 'bx;
        end
    end else begin
        valid_valid_1_phi_fu_988_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((1'd0 == valid_valid_phi_fu_663_p4) & (1'd0 == empty_n_13_fu_1179_p1))) begin
            valid_valid_3_phi_fu_1011_p4 = data_valid_pipe1_write_V_empty_n;
        end else if (((valid_valid_phi_fu_663_p4 == 1'd1) | (1'd1 == empty_n_13_fu_1179_p1))) begin
            valid_valid_3_phi_fu_1011_p4 = p_valid_valid_1_fu_1197_p2;
        end else begin
            valid_valid_3_phi_fu_1011_p4 = 'bx;
        end
    end else begin
        valid_valid_3_phi_fu_1011_p4 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_condition_309 = (1'b1 == (reqs_pipe0_write_V_sector_off_empty_n & reqs_pipe0_write_V_sector_num_empty_n & reqs_pipe0_write_V_tag_empty_n & reqs_pipe0_write_V_rw_empty_n));
end

always @ (*) begin
    ap_condition_321 = (1'b1 == (reqs_pipe1_read_V_sector_off_full_n & reqs_pipe1_read_V_sector_num_full_n & reqs_pipe1_read_V_tag_full_n & reqs_pipe1_read_V_rw_full_n));
end

always @ (*) begin
    ap_condition_329 = (1'b1 == (reqs_pipe1_write_V_sector_off_empty_n & reqs_pipe1_write_V_sector_num_empty_n & reqs_pipe1_write_V_tag_empty_n & reqs_pipe1_write_V_rw_empty_n));
end

always @ (*) begin
    ap_condition_341 = (1'b1 == (reqs_pipe2_read_V_sector_off_full_n & reqs_pipe2_read_V_sector_num_full_n & reqs_pipe2_read_V_tag_full_n & reqs_pipe2_read_V_rw_full_n));
end

assign ap_done = 1'b0;

assign ap_ready = 1'b0;

assign data_pipe1_write_V_data_V_read = data_pipe1_write_V_last0_update;

assign data_pipe1_write_V_last_read = data_pipe1_write_V_last0_update;

assign data_pipe2_read_V_data_V_din = tmp_data_V_phi_fu_910_p4;

assign data_pipe2_read_V_data_V_write = data_pipe2_read_V_last1_update;

assign data_pipe2_read_V_last_din = tmp_last_phi_fu_921_p4;

assign data_pipe2_read_V_last_write = data_pipe2_read_V_last1_update;

assign data_valid_pipe2_read_V_din = tmp_phi_fu_977_p4;

assign empty_n_10_fu_1062_p1 = empty_n_nbread_fu_394_p5_0;

assign empty_n_11_fu_1105_p1 = empty_n_1_nbread_fu_422_p5_0;

assign empty_n_12_fu_1148_p1 = empty_n_2_nbread_fu_450_p3_0;

assign empty_n_13_fu_1179_p1 = data_valid_pipe1_write_V_empty_n;

assign empty_n_14_fu_1204_p1 = kbuf_addr_pipe0_write_V_empty_n;

assign empty_n_1_nbread_fu_422_p5_0 = (reqs_pipe1_write_V_sector_off_empty_n & reqs_pipe1_write_V_sector_num_empty_n & reqs_pipe1_write_V_tag_empty_n & reqs_pipe1_write_V_rw_empty_n);

assign empty_n_2_nbread_fu_450_p3_0 = (data_pipe1_write_V_last_empty_n & data_pipe1_write_V_data_V_empty_n);

assign empty_n_nbread_fu_394_p5_0 = (reqs_pipe0_write_V_sector_off_empty_n & reqs_pipe0_write_V_sector_num_empty_n & reqs_pipe0_write_V_tag_empty_n & reqs_pipe0_write_V_rw_empty_n);

assign full_n_1_nbwrite_fu_434_p9 = (reqs_pipe2_read_V_sector_off_full_n & reqs_pipe2_read_V_sector_num_full_n & reqs_pipe2_read_V_tag_full_n & reqs_pipe2_read_V_rw_full_n);

assign full_n_2_nbwrite_fu_458_p5 = (data_pipe2_read_V_last_full_n & data_pipe2_read_V_data_V_full_n);

assign full_n_nbwrite_fu_406_p9 = (reqs_pipe1_read_V_sector_off_full_n & reqs_pipe1_read_V_sector_num_full_n & reqs_pipe1_read_V_tag_full_n & reqs_pipe1_read_V_rw_full_n);

assign kbuf_addr_pipe2_read_V_din = tmp_2_phi_fu_1021_p4;

assign not_full_n_i1_fu_1191_p0 = data_valid_pipe2_read_V_full_n;

assign not_full_n_i1_fu_1191_p2 = (not_full_n_i1_fu_1191_p0 ^ 1'd1);

assign not_full_n_i2_fu_1216_p0 = kbuf_addr_pipe2_read_V_full_n;

assign not_full_n_i2_fu_1216_p2 = (not_full_n_i2_fu_1216_p0 ^ 1'd1);

assign not_full_n_i5_fu_1135_p2 = (full_n_1_nbwrite_fu_434_p9 ^ 1'd1);

assign not_full_n_i9_fu_1166_p2 = (full_n_2_nbwrite_fu_458_p5 ^ 1'd1);

assign not_full_n_i_fu_1092_p2 = (full_n_nbwrite_fu_406_p9 ^ 1'd1);

assign p_vali_1_fu_1222_p2 = (vali_1_phi_fu_1032_p4 & not_full_n_i2_fu_1216_p2);

assign p_valid_data_1_fu_1172_p2 = (valid_data_1_phi_fu_932_p4 & not_full_n_i9_fu_1166_p2);

assign p_valid_req0_1_fu_1098_p2 = (valid_req0_1_phi_fu_728_p4 & not_full_n_i_fu_1092_p2);

assign p_valid_req1_1_fu_1141_p2 = (valid_req1_1_phi_fu_841_p4 & not_full_n_i5_fu_1135_p2);

assign p_valid_valid_1_fu_1197_p2 = (valid_valid_1_phi_fu_988_p4 & not_full_n_i1_fu_1191_p2);

assign reqs_pipe0_write_V_rw_read = reqs_pipe0_write_V_rw0_update;

assign reqs_pipe0_write_V_sector_num_read = reqs_pipe0_write_V_rw0_update;

assign reqs_pipe0_write_V_sector_off_read = reqs_pipe0_write_V_rw0_update;

assign reqs_pipe0_write_V_tag_read = reqs_pipe0_write_V_rw0_update;

assign reqs_pipe1_read_V_rw_din = tmp_rw_phi_fu_684_p4;

assign reqs_pipe1_read_V_rw_write = reqs_pipe1_read_V_rw1_update;

assign reqs_pipe1_read_V_sector_num_din = tmp_sector_num_phi_fu_706_p4;

assign reqs_pipe1_read_V_sector_num_write = reqs_pipe1_read_V_rw1_update;

assign reqs_pipe1_read_V_sector_off_din = tmp_sector_off_phi_fu_717_p4;

assign reqs_pipe1_read_V_sector_off_write = reqs_pipe1_read_V_rw1_update;

assign reqs_pipe1_read_V_tag_din = tmp_tag_phi_fu_695_p4;

assign reqs_pipe1_read_V_tag_write = reqs_pipe1_read_V_rw1_update;

assign reqs_pipe1_write_V_rw_read = reqs_pipe1_write_V_rw0_update;

assign reqs_pipe1_write_V_sector_num_read = reqs_pipe1_write_V_rw0_update;

assign reqs_pipe1_write_V_sector_off_read = reqs_pipe1_write_V_rw0_update;

assign reqs_pipe1_write_V_tag_read = reqs_pipe1_write_V_rw0_update;

assign reqs_pipe2_read_V_rw_din = tmp_rw_2_phi_fu_797_p4;

assign reqs_pipe2_read_V_rw_write = reqs_pipe2_read_V_rw1_update;

assign reqs_pipe2_read_V_sector_num_din = tmp_sector_num_2_phi_fu_819_p4;

assign reqs_pipe2_read_V_sector_num_write = reqs_pipe2_read_V_rw1_update;

assign reqs_pipe2_read_V_sector_off_din = tmp_sector_off_2_phi_fu_830_p4;

assign reqs_pipe2_read_V_sector_off_write = reqs_pipe2_read_V_rw1_update;

assign reqs_pipe2_read_V_tag_din = tmp_tag_2_phi_fu_808_p4;

assign reqs_pipe2_read_V_tag_write = reqs_pipe2_read_V_rw1_update;

assign vali_phi_fu_674_p4 = vali_reg_670;

assign valid_data_phi_fu_652_p4 = valid_data_reg_648;

assign valid_req0_phi_fu_630_p4 = valid_req0_reg_626;

assign valid_req1_phi_fu_641_p4 = valid_req1_reg_637;

assign valid_valid_phi_fu_663_p4 = valid_valid_reg_659;

endmodule //pipeline_data_passer
